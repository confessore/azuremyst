@page "/profile/changepassword/{Id}"
@using Azuremyst.Models
@using Azuremyst.Models.Acore.Auth
@using Azuremyst.Services
@inject UserService _userService
@inject AccountAssociationService _accountAssociationService
@inject AcoreAuthService _acoreAuthService
@inject NavigationManager _navigationManager
@inject SoapService _soapService

<PageTitle>Azuremyst | Change Password</PageTitle>

<h3>ChangePassword</h3>
<MudContainer Class="d-flex flex-column justify-content-center">
    <MudInput @bind-Value="password" InputType="InputType.Password" Placeholder="Password"></MudInput>
    <MudInput @bind-Value="passwordConfirm" InputType="InputType.Password" Placeholder="Confirm Password"></MudInput>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await OnChangePasswordClicked()">Change Password</MudButton>
</MudContainer>

@code {
    [Parameter]
    public string? Id { get; set; }

    private User? user = new();
    private AccountAssociation? accountAssociation = new();
    private Account? account = new();

    private string? password = string.Empty;
    private string? passwordConfirm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        user = await _userService.InitializeUserAsync();
        if (user is null)
            _navigationManager.NavigateTo("/");
        var parseResult = uint.TryParse(Id, out var id);
        accountAssociation = await _accountAssociationService.GetAccountAssociationByAccountIdAsync(parseResult ? id : 0);
        if ((accountAssociation?.UserId ?? 0) != user?.Id)
        {
            _navigationManager.NavigateTo("/profile");
        }
        else
        {
            account = await _acoreAuthService.GetAccountByIdAsync(parseResult ? id : 0);
        }
    }

    private async Task OnChangePasswordClicked()
    {
        if (
            !string.IsNullOrEmpty(password) &&
            !string.IsNullOrEmpty(passwordConfirm)
        )
            if (password == passwordConfirm)
            {
                await _soapService.SetPasswordAsync(account?.Id.ToString(), password);
                _navigationManager.NavigateTo($"/profile/accountdetail/{account?.Id}");
            }
    }
}
