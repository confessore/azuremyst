// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using azuremyst.contexts;

#nullable disable

namespace azuremyst.Migrations.WorldDb
{
    [DbContext(typeof(WorldDbContext))]
    [Migration("20220516213610_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("azuremyst.models.mangosd.AreatriggerInvolvedrelation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Quest Identifier");

                    b.HasKey("Id");

                    b.ToTable("areatrigger_involvedrelation", (string)null);

                    b.HasComment("Trigger System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.AreatriggerTavern", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("areatrigger_tavern", (string)null);

                    b.HasComment("Trigger System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.AreatriggerTeleport", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<uint>("ConditionId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("condition_id");

                    b.Property<uint>("HeroicKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("heroic_key")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("HeroicKey2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("heroic_key2")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<uint>("RequiredItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("required_item")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RequiredItem2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("required_item2")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("RequiredLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("required_level");

                    b.Property<uint>("RequiredQuestDone")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("required_quest_done");

                    b.Property<uint>("RequiredQuestDoneHeroic")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("required_quest_done_heroic");

                    b.Property<string>("StatusFailedText")
                        .HasColumnType("text")
                        .HasColumnName("status_failed_text");

                    b.Property<ushort>("TargetMap")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("target_map");

                    b.Property<float>("TargetOrientation")
                        .HasColumnType("float")
                        .HasColumnName("target_orientation");

                    b.Property<float>("TargetPositionX")
                        .HasColumnType("float")
                        .HasColumnName("target_position_x");

                    b.Property<float>("TargetPositionY")
                        .HasColumnType("float")
                        .HasColumnName("target_position_y");

                    b.Property<float>("TargetPositionZ")
                        .HasColumnType("float")
                        .HasColumnName("target_position_z");

                    b.HasKey("Id");

                    b.ToTable("areatrigger_teleport", (string)null);

                    b.HasComment("Trigger System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.BattlegroundEvent", b =>
                {
                    b.Property<short>("Map")
                        .HasColumnType("smallint(5)")
                        .HasColumnName("map");

                    b.Property<byte>("Event1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event1");

                    b.Property<byte>("Event2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Map", "Event1", "Event2")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("battleground_events", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.BattlegroundTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("AllianceStartLoc")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("HordeStartLoc")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<byte>("MaxLvl")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("MaxPlayersPerTeam")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<byte>("MinLvl")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("MinPlayersPerTeam")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<float>("StartMaxDist")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("battleground_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.BattlemasterEntry", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Entry of a creature");

                    b.Property<uint>("BgTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("bg_template")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Battleground template id");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("battlemaster_entry", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Command", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Help")
                        .HasColumnType("longtext")
                        .HasColumnName("help");

                    b.Property<byte>("Security")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("security");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("command", (string)null);

                    b.HasComment("Chat System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Condition", b =>
                {
                    b.Property<uint>("ConditionEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_entry")
                        .HasComment("Identifier");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("Flags")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("flags");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("type")
                        .HasComment("Type of the condition");

                    b.Property<uint>("Value1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("value1")
                        .HasDefaultValueSql("'0'")
                        .HasComment("data field one for the condition");

                    b.Property<uint>("Value2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("value2")
                        .HasDefaultValueSql("'0'")
                        .HasComment("data field two for the condition");

                    b.Property<uint>("Value3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("value3")
                        .HasDefaultValueSql("'0'")
                        .HasComment("data field three for the condition");

                    b.Property<uint>("Value4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("value4")
                        .HasDefaultValueSql("'0'")
                        .HasComment("data field four for the condition");

                    b.HasKey("ConditionEntry")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Type", "Value1", "Value2", "Value3", "Value4", "Flags" }, "unique_conditions")
                        .IsUnique();

                    b.ToTable("conditions", (string)null);

                    b.HasComment("Condition System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Creature", b =>
                {
                    b.Property<uint>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("Global Unique Identifier");

                    b.Property<uint>("Curhealth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("curhealth")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Curmana")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("curmana");

                    b.Property<uint>("Currentwaypoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("currentwaypoint")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("DeathState")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("equipment_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Creature Identifier");

                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map")
                        .HasComment("Map Identifier");

                    b.Property<uint>("Modelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("MovementType")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<float>("Orientation")
                        .HasColumnType("float")
                        .HasColumnName("orientation");

                    b.Property<float>("PositionX")
                        .HasColumnType("float")
                        .HasColumnName("position_x");

                    b.Property<float>("PositionY")
                        .HasColumnType("float")
                        .HasColumnName("position_y");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float")
                        .HasColumnName("position_z");

                    b.Property<byte>("SpawnMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spawnMask")
                        .HasDefaultValueSql("'1'");

                    b.Property<float>("Spawndist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("spawndist")
                        .HasDefaultValueSql("'5'");

                    b.Property<uint>("Spawntimesecsmax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawntimesecsmax")
                        .HasDefaultValueSql("'120'")
                        .HasComment("Creature respawn time maximum");

                    b.Property<uint>("Spawntimesecsmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawntimesecsmin")
                        .HasDefaultValueSql("'120'")
                        .HasComment("Creature respawn time minimum");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Map" }, "idx_map");

                    b.HasIndex(new[] { "Id" }, "index_id");

                    b.ToTable("creature", (string)null);

                    b.HasComment("Creature System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureAddon", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<string>("Auras")
                        .HasColumnType("text")
                        .HasColumnName("auras");

                    b.Property<byte>("B20Sheath")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("b2_0_sheath");

                    b.Property<byte>("B21Flags")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("b2_1_flags");

                    b.Property<uint>("Bytes1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bytes1");

                    b.Property<uint>("Emote")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("emote");

                    b.Property<uint>("Mount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mount")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Moveflags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("moveflags");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_addon", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureAiScript", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id")
                        .HasComment("Identifier");

                    b.Property<int>("Action1Param1")
                        .HasColumnType("int(11)")
                        .HasColumnName("action1_param1");

                    b.Property<int>("Action1Param2")
                        .HasColumnType("int(11)")
                        .HasColumnName("action1_param2");

                    b.Property<int>("Action1Param3")
                        .HasColumnType("int(11)")
                        .HasColumnName("action1_param3");

                    b.Property<byte>("Action1Type")
                        .HasColumnType("tinyint(5) unsigned")
                        .HasColumnName("action1_type")
                        .HasComment("Action Type");

                    b.Property<int>("Action2Param1")
                        .HasColumnType("int(11)")
                        .HasColumnName("action2_param1");

                    b.Property<int>("Action2Param2")
                        .HasColumnType("int(11)")
                        .HasColumnName("action2_param2");

                    b.Property<int>("Action2Param3")
                        .HasColumnType("int(11)")
                        .HasColumnName("action2_param3");

                    b.Property<byte>("Action2Type")
                        .HasColumnType("tinyint(5) unsigned")
                        .HasColumnName("action2_type")
                        .HasComment("Action Type");

                    b.Property<int>("Action3Param1")
                        .HasColumnType("int(11)")
                        .HasColumnName("action3_param1");

                    b.Property<int>("Action3Param2")
                        .HasColumnType("int(11)")
                        .HasColumnName("action3_param2");

                    b.Property<int>("Action3Param3")
                        .HasColumnType("int(11)")
                        .HasColumnName("action3_param3");

                    b.Property<byte>("Action3Type")
                        .HasColumnType("tinyint(5) unsigned")
                        .HasColumnName("action3_type")
                        .HasComment("Action Type");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("''")
                        .HasComment("Event Comment");

                    b.Property<uint>("CreatureId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("creature_id")
                        .HasComment("Creature Template Identifier");

                    b.Property<uint>("EventChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(3) unsigned")
                        .HasColumnName("event_chance")
                        .HasDefaultValueSql("'100'");

                    b.Property<uint>("EventFlags")
                        .HasColumnType("int(3) unsigned")
                        .HasColumnName("event_flags");

                    b.Property<int>("EventInversePhaseMask")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_inverse_phase_mask")
                        .HasComment("Mask which phases this event will not trigger in");

                    b.Property<int>("EventParam1")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param1");

                    b.Property<int>("EventParam2")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param2");

                    b.Property<int>("EventParam3")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param3");

                    b.Property<int>("EventParam4")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param4");

                    b.Property<int>("EventParam5")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param5");

                    b.Property<int>("EventParam6")
                        .HasColumnType("int(11)")
                        .HasColumnName("event_param6");

                    b.Property<byte>("EventType")
                        .HasColumnType("tinyint(5) unsigned")
                        .HasColumnName("event_type")
                        .HasComment("Event Type");

                    b.HasKey("Id");

                    b.ToTable("creature_ai_scripts", (string)null);

                    b.HasComment("EventAI Scripts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureAiSummon", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id")
                        .HasComment("Location Identifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("''")
                        .HasComment("Summon Comment");

                    b.Property<float>("Orientation")
                        .HasColumnType("float")
                        .HasColumnName("orientation");

                    b.Property<float>("PositionX")
                        .HasColumnType("float")
                        .HasColumnName("position_x");

                    b.Property<float>("PositionY")
                        .HasColumnType("float")
                        .HasColumnName("position_y");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float")
                        .HasColumnName("position_z");

                    b.Property<uint>("Spawntimesecs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("spawntimesecs")
                        .HasDefaultValueSql("'120'");

                    b.HasKey("Id");

                    b.ToTable("creature_ai_summons", (string)null);

                    b.HasComment("EventAI Summoning Locations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureAiText", b =>
                {
                    b.Property<int>("Entry")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("entry");

                    b.Property<int>("BroadcastTextId")
                        .HasColumnType("int(11)")
                        .HasColumnName("broadcast_text_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.Property<ushort>("Emote")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("emote");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language");

                    b.Property<uint>("Sound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("sound")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("creature_ai_texts", (string)null);

                    b.HasComment("Script Texts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureBattleground", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("Creature's GUID");

                    b.Property<byte>("Event1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event1")
                        .HasComment("main event");

                    b.Property<byte>("Event2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event2")
                        .HasComment("sub event");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_battleground", (string)null);

                    b.HasComment("Creature battleground indexing system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureConditionalSpawn", b =>
                {
                    b.Property<uint>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Global Unique Identifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("EntryAlliance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Alliance Creature Identifier");

                    b.Property<uint>("EntryHorde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Horde Creature Identifier");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_conditional_spawn", (string)null);

                    b.HasComment("Creature System (Conditional Spawn)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureCooldown", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned");

                    b.Property<uint>("SpellId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CooldownMax")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CooldownMin")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Entry", "SpellId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_cooldowns", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureEquipTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Unique entry");

                    b.Property<uint>("Equipentry1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipentry1")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Equipentry2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipentry2")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Equipentry3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipentry3")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("creature_equip_template", (string)null);

                    b.HasComment("Creature System (Equipment)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureEquipTemplateRaw", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Unique entry");

                    b.Property<uint>("Equipinfo1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("equipinfo1");

                    b.Property<uint>("Equipinfo2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("equipinfo2");

                    b.Property<uint>("Equipinfo3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("equipinfo3");

                    b.Property<uint>("Equipmodel1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipmodel1")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Equipmodel2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipmodel2")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Equipmodel3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipmodel3")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Equipslot1")
                        .HasColumnType("int(11)")
                        .HasColumnName("equipslot1");

                    b.Property<int>("Equipslot2")
                        .HasColumnType("int(11)")
                        .HasColumnName("equipslot2");

                    b.Property<int>("Equipslot3")
                        .HasColumnType("int(11)")
                        .HasColumnName("equipslot3");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("creature_equip_template_raw", (string)null);

                    b.HasComment("Creature System (Equipment)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureImmunity", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("creature_template entry");

                    b.Property<uint>("SetId")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("immunity set ID");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasComment("enum SpellImmunity");

                    b.Property<uint>("Value")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("value depending on type");

                    b.HasKey("Entry", "SetId", "Type", "Value")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                    b.ToTable("creature_immunities", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureInvolvedrelation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Quest Identifier");

                    b.HasKey("Id", "Quest")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_involvedrelation", (string)null);

                    b.HasComment("Creature System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureLinking", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("creature.guid of the slave mob that is linked");

                    b.Property<uint>("Flag")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("flag")
                        .HasComment("flag - describing what should happen when");

                    b.Property<uint>("MasterGuid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("master_guid")
                        .HasComment("master to trigger events");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_linking", (string)null);

                    b.HasComment("Creature Linking System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureLinkingTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("creature_template.entry of the slave mob that is linked");

                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map")
                        .HasComment("Id of map of the mobs");

                    b.Property<uint>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("flag")
                        .HasDefaultValueSql("'0'")
                        .HasComment("flag - describing what should happen when");

                    b.Property<uint>("MasterEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("master_entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("master to trigger events");

                    b.Property<uint>("SearchRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("search_range")
                        .HasDefaultValueSql("'0'")
                        .HasComment("search_range - describing in which range (spawn-coords) master and slave are linked together");

                    b.HasKey("Entry", "Map")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_linking_template", (string)null);

                    b.HasComment("Creature Linking System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("entry 0 used for player insignia loot");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureModelInfo", b =>
                {
                    b.Property<uint>("Modelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("BoundingRadius")
                        .HasColumnType("float")
                        .HasColumnName("bounding_radius");

                    b.Property<float>("CombatReach")
                        .HasColumnType("float")
                        .HasColumnName("combat_reach");

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender")
                        .HasDefaultValueSql("'2'");

                    b.Property<uint>("ModelidAlternative")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid_alternative")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ModelidOtherGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid_other_gender")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("SpeedRun")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1.14286'")
                        .HasComment("Default running speed for any creature with model");

                    b.Property<float>("SpeedWalk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'")
                        .HasComment("Default walking speed for any creature with model");

                    b.HasKey("Modelid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_model_info", (string)null);

                    b.HasComment("Creature System (Model related info)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureModelRace", b =>
                {
                    b.Property<uint>("Modelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Racemask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("racemask")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("CreatureEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("creature_entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("option 1, modelid_N from creature_template");

                    b.Property<uint>("ModelidRacial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid_racial")
                        .HasDefaultValueSql("'0'")
                        .HasComment("option 2, explicit modelid");

                    b.HasKey("Modelid", "Racemask")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_model_race", (string)null);

                    b.HasComment("Model system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureMovement", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Creature GUID");

                    b.Property<uint>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Orientation")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<uint>("ScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("WaitTime")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id", "Point")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_movement", (string)null);

                    b.HasComment("Creature System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureMovementTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasComment("Creature entry");

                    b.Property<uint>("PathId")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Path ID for entry");

                    b.Property<uint>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Orientation")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<uint>("ScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("WaitTime")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Entry", "PathId", "Point")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("creature_movement_template", (string)null);

                    b.HasComment("Creature waypoint system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureOnkillReputation", b =>
                {
                    b.Property<uint>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("creature_id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Creature Identifier");

                    b.Property<sbyte>("IsTeamAward1")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("IsTeamAward2")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaxStanding1")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaxStanding2")
                        .HasColumnType("tinyint(4)");

                    b.Property<short>("RewOnKillRepFaction1")
                        .HasColumnType("smallint(6)");

                    b.Property<short>("RewOnKillRepFaction2")
                        .HasColumnType("smallint(6)");

                    b.Property<int>("RewOnKillRepValue1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewOnKillRepValue2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("TeamDependent")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("CreatureId")
                        .HasName("PRIMARY");

                    b.ToTable("creature_onkill_reputation", (string)null);

                    b.HasComment("Creature OnKill Reputation gain");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureQuestrelation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Quest Identifier");

                    b.HasKey("Id", "Quest")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_questrelation", (string)null);

                    b.HasComment("Creature System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpawnDataTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("ID of template");

                    b.Property<long>("UnitFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasDefaultValueSql("-1");

                    b.Property<uint>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("CurHealth")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CurMana")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("SpawnFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Faction")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("NpcFlags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("-1");

                    b.Property<uint>("RelayId")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Entry", "UnitFlags", "ModelId", "EquipmentId", "CurHealth", "CurMana", "SpawnFlags")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0 });

                    b.ToTable("creature_spawn_data_template", (string)null);

                    b.HasComment("Creature System (Spawn Data Template)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpawnDatum", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("guid of creature");

                    b.Property<uint>("Id")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("ID of template");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("creature_spawn_data", (string)null);

                    b.HasComment("Creature System (Spawn Data)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpawnEntry", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("Global Unique Identifier");

                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Guid", "Entry")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_spawn_entry", (string)null);

                    b.HasComment("Creature System (Spawn Entry)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpellList", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("List ID");

                    b.Property<int>("Position")
                        .HasColumnType("int(11)")
                        .HasComment("Position on list");

                    b.Property<int>("Availability")
                        .HasColumnType("int(11)")
                        .HasComment("Chance on spawn for spell to be included");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Description of spell use");

                    b.Property<int>("Flags")
                        .HasColumnType("int(11)")
                        .HasComment("Spell Flags");

                    b.Property<int>("InitialMax")
                        .HasColumnType("int(11)")
                        .HasComment("Initial delay maximum");

                    b.Property<int>("InitialMin")
                        .HasColumnType("int(11)")
                        .HasComment("Initial delay minimum");

                    b.Property<int>("Probability")
                        .HasColumnType("int(11)")
                        .HasComment("Weight of spell when multiple are available");

                    b.Property<int>("RepeatMax")
                        .HasColumnType("int(11)")
                        .HasComment("Repeated delay maximum");

                    b.Property<int>("RepeatMin")
                        .HasColumnType("int(11)")
                        .HasComment("Repeated delay minimum");

                    b.Property<int>("ScriptId")
                        .HasColumnType("int(11)")
                        .HasComment("Dbscript to be launched on success");

                    b.Property<int>("SpellId")
                        .HasColumnType("int(11)")
                        .HasComment("Spell ID");

                    b.Property<int>("TargetId")
                        .HasColumnType("int(11)")
                        .HasComment("Targeting ID");

                    b.HasKey("Id", "Position")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_spell_list", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpellListEntry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("List ID");

                    b.Property<int>("ChanceRangedAttack")
                        .HasColumnType("int(11)")
                        .HasComment("Chance of ranged attack per tick");

                    b.Property<int>("ChanceSupportAction")
                        .HasColumnType("int(11)")
                        .HasComment("Chance of support action per tick");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Description of usage");

                    b.HasKey("Id");

                    b.ToTable("creature_spell_list_entry", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureSpellTargeting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Targeting ID");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasComment("Description of target");

                    b.Property<int>("Param1")
                        .HasColumnType("int(11)")
                        .HasComment("First parameter");

                    b.Property<int>("Param2")
                        .HasColumnType("int(11)")
                        .HasComment("Second parameter");

                    b.Property<int>("Param3")
                        .HasColumnType("int(11)")
                        .HasComment("Third parameter");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)")
                        .HasComment("Type of targeting ID");

                    b.HasKey("Id");

                    b.ToTable("creature_spell_targeting", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Ainame")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .HasColumnName("AIName")
                        .HasDefaultValueSql("''")
                        .IsFixedLength();

                    b.Property<uint>("Armor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ArmorMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("CallForHelp")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Range in which creature calls for help?");

                    b.Property<uint>("CorpseDecay")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Time before corpse despawns");

                    b.Property<byte>("CreatureType")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("CreatureTypeFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<float>("DamageMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("DamageSchool")
                        .HasColumnType("tinyint(4)");

                    b.Property<float>("DamageVariance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Detection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'20'")
                        .HasComment("Detection range for proximity");

                    b.Property<uint>("DynamicFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("EquipmentTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Expansion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasDefaultValueSql("-1");

                    b.Property<float>("ExperienceMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("ExtraFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("Faction")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<sbyte>("Family")
                        .HasColumnType("tinyint(4)");

                    b.Property<uint>("GossipMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("HealthMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("HeroicEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("IconName")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<byte>("InhabitType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'3'");

                    b.Property<int>("InteractionPauseTimer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasDefaultValueSql("-1");

                    b.Property<uint>("KillCredit1")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("KillCredit2")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Leash")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Leash range from combat start position");

                    b.Property<uint>("LootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("MaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MaxLevelHealth")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MaxLevelMana")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MaxLootGold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("MaxMeleeDmg")
                        .HasColumnType("float");

                    b.Property<float>("MaxRangedDmg")
                        .HasColumnType("float");

                    b.Property<uint>("MechanicImmuneMask")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MeleeAttackPower")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MeleeBaseAttackTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'2000'");

                    b.Property<byte>("MinLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MinLevelHealth")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MinLevelMana")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("MinLootGold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("MinMeleeDmg")
                        .HasColumnType("float");

                    b.Property<float>("MinRangedDmg")
                        .HasColumnType("float");

                    b.Property<uint>("ModelId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ModelId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ModelId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ModelId4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("MovementType")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .HasDefaultValueSql("''")
                        .IsFixedLength();

                    b.Property<uint>("NpcFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("PetSpellDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("PickpocketLootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("PowerMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Pursuit")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("When exceeded during pursuit creature evades?");

                    b.Property<byte>("RacialLeader")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("RangedAttackPower")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("RangedBaseAttackTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'2000'");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("RegenerateStats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'3'");

                    b.Property<short>("ResistanceArcane")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("ResistanceFire")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("ResistanceFrost")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("ResistanceHoly")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("ResistanceNature")
                        .HasColumnType("smallint(5)");

                    b.Property<short>("ResistanceShadow")
                        .HasColumnType("smallint(5)");

                    b.Property<float>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("SchoolImmuneMask")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .HasDefaultValueSql("''")
                        .IsFixedLength();

                    b.Property<uint>("SkinningLootId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("SpeedRun")
                        .HasColumnType("float");

                    b.Property<float>("SpeedWalk")
                        .HasColumnType("float");

                    b.Property<int>("SpellList")
                        .HasColumnType("int(11)")
                        .HasComment("creature_spell_list_entry");

                    b.Property<string>("SubName")
                        .HasMaxLength(100)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<uint>("Timeout")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Time for refreshing leashing before evade?");

                    b.Property<byte>("TrainerClass")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("TrainerRace")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("TrainerSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("TrainerTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("TrainerType")
                        .HasColumnType("tinyint(4)");

                    b.Property<byte>("UnitClass")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("UnitFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("VendorTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("VisibilityDistanceType")
                        .HasColumnType("tinyint(4)");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("creature_template", (string)null);

                    b.HasComment("Creature System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureTemplateAddon", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Auras")
                        .HasColumnType("text")
                        .HasColumnName("auras");

                    b.Property<byte>("B20Sheath")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("b2_0_sheath");

                    b.Property<byte>("B21Flags")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("b2_1_flags");

                    b.Property<uint>("Bytes1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bytes1");

                    b.Property<uint>("Emote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("emote")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Mount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mount")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Moveflags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("moveflags");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("creature_template_addon", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CreatureTemplateSpell", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry");

                    b.Property<uint>("SetId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("setId")
                        .HasComment("Id of set of spells");

                    b.Property<uint>("Spell1")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell1");

                    b.Property<uint>("Spell10")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell10")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell2")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell3")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell4")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell5")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell6")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell7")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell7")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell8")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell8")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell9")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell9")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Entry", "SetId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("creature_template_spells", (string)null);

                    b.HasComment("Creature System (Spells used by creature)");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.CustomText", b =>
                {
                    b.Property<int>("Entry")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("entry");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.Property<ushort>("Emote")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("emote");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language");

                    b.Property<uint>("Sound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("sound")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("custom_texts", (string)null);

                    b.HasComment("Custom Texts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptRandomTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id")
                        .HasComment("Id of template");

                    b.Property<uint>("Type")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("type")
                        .HasComment("Type of template");

                    b.Property<int>("TargetId")
                        .HasColumnType("int(11)")
                        .HasColumnName("target_id")
                        .HasComment("Id of chanced element");

                    b.Property<int>("Chance")
                        .HasColumnType("int(11)")
                        .HasColumnName("chance")
                        .HasComment("Chance for element to occur in %");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id", "Type", "TargetId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("dbscript_random_templates", (string)null);

                    b.HasComment("DBScript system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnCreatureDeath", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_creature_death", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnCreatureMovement", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_creature_movement", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnEvent", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_event", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnGossip", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_gossip", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnGoTemplateUse", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_go_template_use", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnGoUse", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_go_use", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnQuestEnd", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_quest_end", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnQuestStart", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_quest_start", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptsOnSpell", b =>
                {
                    b.Property<uint>("BuddyEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("buddy_entry");

                    b.Property<uint>("Command")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("command")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DataFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data_flags");

                    b.Property<float>("Datafloat")
                        .HasColumnType("float")
                        .HasColumnName("datafloat");

                    b.Property<int>("Dataint")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint");

                    b.Property<int>("Dataint2")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint2");

                    b.Property<int>("Dataint3")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint3");

                    b.Property<int>("Dataint4")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataint4");

                    b.Property<uint>("Datalong")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong");

                    b.Property<uint>("Datalong2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("datalong2");

                    b.Property<uint>("Datalong3")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("datalong3");

                    b.Property<uint>("Delay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("delay");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("priority");

                    b.Property<uint>("SearchRadius")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("search_radius");

                    b.Property<float>("Speed")
                        .HasColumnType("float")
                        .HasColumnName("speed");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.ToTable("dbscripts_on_spell", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptString", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("entry");

                    b.Property<int>("BroadcastTextId")
                        .HasColumnType("int(11)")
                        .HasColumnName("broadcast_text_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.Property<ushort>("Emote")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("emote");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language");

                    b.Property<uint>("Sound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("sound")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("dbscript_string", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbscriptStringTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id")
                        .HasComment("Id of template");

                    b.Property<int>("StringId")
                        .HasColumnType("int(11)")
                        .HasColumnName("string_id")
                        .HasComment("dbscript_string id");

                    b.HasKey("Id", "StringId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("dbscript_string_template", (string)null);

                    b.HasComment("DBScript system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DbVersion", b =>
                {
                    b.Property<string>("CreatureAiVersion")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("creature_ai_version");

                    b.Property<ulong?>("RequiredS245001MangosQuestMaxlevel")
                        .HasColumnType("bit(1)")
                        .HasColumnName("required_s2450_01_mangos_quest_maxlevel");

                    b.Property<string>("Version")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("version");

                    b.ToTable("db_version", (string)null);

                    b.HasComment("Used DB version notes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.DisenchantLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Recommended id selection: item_level*100 + item_quality");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("disenchant_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ExplorationBasexp", b =>
                {
                    b.Property<sbyte>("Level")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("level");

                    b.Property<int>("Basexp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("basexp")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Level")
                        .HasName("PRIMARY");

                    b.ToTable("exploration_basexp", (string)null);

                    b.HasComment("Exploration System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.FishingLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("entry 0 used for junk loot at fishing fail (if allowed by config option)");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("fishing_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEvent", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasComment("Entry of the game event");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasComment("Description of the event displayed in console");

                    b.Property<uint>("EventGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Used for events that are randomized daily/weekly");

                    b.Property<uint>("Holiday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("holiday")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Client side holiday id");

                    b.Property<ulong>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("length")
                        .HasDefaultValueSql("'43200'")
                        .HasComment("Length in minutes of the event");

                    b.Property<uint>("LinkedTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("linkedTo")
                        .HasDefaultValueSql("'0'")
                        .HasComment("This event starts only if defined LinkedTo event is started");

                    b.Property<ulong>("Occurence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("occurence")
                        .HasDefaultValueSql("'86400'")
                        .HasComment("Delay in minutes between occurences of the event");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("game_event", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventCreature", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<short>("Event")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("event")
                        .HasComment("Negatives value to remove during event and ignore pool grouping, positive value for spawn during event and if guid is part of pool then al pool memebers must be listed as part of event spawn.");

                    b.HasKey("Guid", "Event")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("game_event_creature", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventCreatureDatum", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<ushort>("Event")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("event");

                    b.Property<uint>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("equipment_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Modelid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("modelid")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("SpellEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell_end")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("SpellStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell_start")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("vendor_id")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Guid", "Event")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("game_event_creature_data", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventGameobject", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<short>("Event")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("event")
                        .HasComment("Negatives value to remove during event and ignore pool grouping, positive value for spawn during event and if guid is part of pool then al pool memebers must be listed as part of event spawn.");

                    b.HasKey("Guid", "Event")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("game_event_gameobject", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventMail", b =>
                {
                    b.Property<short>("Event")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("event")
                        .HasComment("Negatives value to send at event stop, positive value for send at event start.");

                    b.Property<uint>("RaceMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("raceMask")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("MailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mailTemplateId")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("SenderEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("senderEntry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Event", "RaceMask", "Quest")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("game_event_mail", (string)null);

                    b.HasComment("Game event system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventQuest", b =>
                {
                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("entry from quest_template");

                    b.Property<ushort>("Event")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("event")
                        .HasComment("entry from game_event");

                    b.HasKey("Quest", "Event")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("game_event_quest", (string)null);

                    b.HasComment("Game event system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameEventTime", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasComment("Entry of the game event");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'")
                        .HasComment("Absolute end date, the event will never start after");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_time")
                        .HasDefaultValueSql("'1970-01-01 00:00:00'")
                        .HasComment("Absolute start date, the event will never start before");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("game_event_time", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameGraveyardZone", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("GhostLoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("ghost_loc")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("LinkKind")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("link_kind");

                    b.Property<ushort>("Faction")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("faction");

                    b.HasKey("Id", "GhostLoc", "LinkKind")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("game_graveyard_zone", (string)null);

                    b.HasComment("Graveyard link definitions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Gameobject", b =>
                {
                    b.Property<uint>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("Global Unique Identifier");

                    b.Property<byte>("Animprogress")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("animprogress");

                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Gameobject Identifier");

                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map")
                        .HasComment("Map Identifier");

                    b.Property<float>("Orientation")
                        .HasColumnType("float")
                        .HasColumnName("orientation");

                    b.Property<float>("PositionX")
                        .HasColumnType("float")
                        .HasColumnName("position_x");

                    b.Property<float>("PositionY")
                        .HasColumnType("float")
                        .HasColumnName("position_y");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float")
                        .HasColumnName("position_z");

                    b.Property<float>("Rotation0")
                        .HasColumnType("float")
                        .HasColumnName("rotation0");

                    b.Property<float>("Rotation1")
                        .HasColumnType("float")
                        .HasColumnName("rotation1");

                    b.Property<float>("Rotation2")
                        .HasColumnType("float")
                        .HasColumnName("rotation2");

                    b.Property<float>("Rotation3")
                        .HasColumnType("float")
                        .HasColumnName("rotation3");

                    b.Property<byte>("SpawnMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spawnMask")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Spawntimesecsmax")
                        .HasColumnType("int(11)")
                        .HasColumnName("spawntimesecsmax")
                        .HasComment("Gameobject respawn time maximum");

                    b.Property<int>("Spawntimesecsmin")
                        .HasColumnType("int(11)")
                        .HasColumnName("spawntimesecsmin")
                        .HasComment("GameObject respawn time minimum");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("state");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "idx_id");

                    b.HasIndex(new[] { "Map" }, "idx_map")
                        .HasDatabaseName("idx_map1");

                    b.ToTable("gameobject", (string)null);

                    b.HasComment("Gameobject System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectBattleground", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("GameObject's GUID");

                    b.Property<byte>("Event1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event1")
                        .HasComment("main event");

                    b.Property<byte>("Event2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("event2")
                        .HasComment("sub event");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.ToTable("gameobject_battleground", (string)null);

                    b.HasComment("GameObject battleground indexing system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectInvolvedrelation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Quest Identifier");

                    b.HasKey("Id", "Quest")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("gameobject_involvedrelation", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("gameobject_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectQuestrelation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Quest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Quest Identifier");

                    b.HasKey("Id", "Quest")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("gameobject_questrelation", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectSpawnEntry", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid")
                        .HasComment("Gameobject table guid");

                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasComment("Gameobject Template entry");

                    b.HasKey("Guid", "Entry")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("gameobject_spawn_entry", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CastBarCaption")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castBarCaption")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("CustomData1")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("Data0")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data0");

                    b.Property<int>("Data1")
                        .HasColumnType("int(10)")
                        .HasColumnName("data1");

                    b.Property<uint>("Data10")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data10");

                    b.Property<uint>("Data11")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data11");

                    b.Property<uint>("Data12")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data12");

                    b.Property<uint>("Data13")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data13");

                    b.Property<uint>("Data14")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data14");

                    b.Property<uint>("Data15")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data15");

                    b.Property<uint>("Data16")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data16");

                    b.Property<uint>("Data17")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data17");

                    b.Property<uint>("Data18")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data18");

                    b.Property<uint>("Data19")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data19");

                    b.Property<uint>("Data2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data2");

                    b.Property<uint>("Data20")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data20");

                    b.Property<uint>("Data21")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data21");

                    b.Property<uint>("Data22")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data22");

                    b.Property<uint>("Data23")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data23");

                    b.Property<uint>("Data3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data3");

                    b.Property<uint>("Data4")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data4");

                    b.Property<uint>("Data5")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data5");

                    b.Property<int>("Data6")
                        .HasColumnType("int(10)")
                        .HasColumnName("data6");

                    b.Property<uint>("Data7")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data7");

                    b.Property<uint>("Data8")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data8");

                    b.Property<uint>("Data9")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("data9");

                    b.Property<uint>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("displayId")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ExtraFlags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("Faction")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("faction");

                    b.Property<uint>("Flags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("flags");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("Maxgold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("maxgold")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Mingold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mingold")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<float>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("size")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("gameobject_template", (string)null);

                    b.HasComment("Gameobject System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameobjectTemplateAddon", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("gameobject_template");

                    b.Property<int>("Artkit0")
                        .HasColumnType("int(11)");

                    b.Property<int>("Artkit1")
                        .HasColumnType("int(11)");

                    b.Property<int>("Artkit2")
                        .HasColumnType("int(11)");

                    b.Property<int>("Artkit3")
                        .HasColumnType("int(11)");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("gameobject_template_addon", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameTele", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<float>("Orientation")
                        .HasColumnType("float")
                        .HasColumnName("orientation");

                    b.Property<float>("PositionX")
                        .HasColumnType("float")
                        .HasColumnName("position_x");

                    b.Property<float>("PositionY")
                        .HasColumnType("float")
                        .HasColumnName("position_y");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float")
                        .HasColumnName("position_z");

                    b.HasKey("Id");

                    b.ToTable("game_tele", (string)null);

                    b.HasComment("Tele Command");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GameWeather", b =>
                {
                    b.Property<uint>("Zone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("zone")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("FallRainChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fall_rain_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("FallSnowChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fall_snow_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("FallStormChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fall_storm_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SpringRainChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spring_rain_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SpringSnowChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spring_snow_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SpringStormChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spring_storm_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SummerRainChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summer_rain_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SummerSnowChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summer_snow_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("SummerStormChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("summer_storm_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("WinterRainChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("winter_rain_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("WinterSnowChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("winter_snow_chance")
                        .HasDefaultValueSql("'25'");

                    b.Property<byte>("WinterStormChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("winter_storm_chance")
                        .HasDefaultValueSql("'25'");

                    b.HasKey("Zone")
                        .HasName("PRIMARY");

                    b.ToTable("game_weather", (string)null);

                    b.HasComment("Weather System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GossipMenu", b =>
                {
                    b.Property<ushort>("Entry")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("entry");

                    b.Property<uint>("TextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("text_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("script_id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("script in `dbscripts_on_gossip` - will be executed on GossipHello");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Entry", "TextId", "ScriptId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("gossip_menu", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GossipMenuOption", b =>
                {
                    b.Property<ushort>("MenuId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("menu_id");

                    b.Property<ushort>("Id")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("ActionMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("action_menu_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ActionPoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("action_poi_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ActionScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("action_script_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("BoxBroadcastText")
                        .HasColumnType("int(11)")
                        .HasColumnName("box_broadcast_text");

                    b.Property<byte>("BoxCoded")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("box_coded");

                    b.Property<uint>("BoxMoney")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("box_money");

                    b.Property<string>("BoxText")
                        .HasColumnType("text")
                        .HasColumnName("box_text");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("NpcOptionNpcflag")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc_option_npcflag");

                    b.Property<int>("OptionBroadcastText")
                        .HasColumnType("int(11)")
                        .HasColumnName("option_broadcast_text");

                    b.Property<uint>("OptionIcon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("option_icon")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("OptionId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("option_id");

                    b.Property<string>("OptionText")
                        .HasColumnType("text")
                        .HasColumnName("option_text");

                    b.HasKey("MenuId", "Id")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("gossip_menu_option", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.GossipText", b =>
                {
                    b.Property<int>("Entry")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("entry");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("gossip_texts", (string)null);

                    b.HasComment("Gossip Texts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.InstanceEncounter", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("entry")
                        .HasComment("Unique entry from DungeonEncounter.dbc");

                    b.Property<uint>("CreditEntry")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("creditEntry");

                    b.Property<byte>("CreditType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("creditType");

                    b.Property<ushort>("LastEncounterDungeon")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("lastEncounterDungeon")
                        .HasComment("If not 0, LfgDungeon.dbc entry for the instance it is last encounter in");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("instance_encounters", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.InstanceTemplate", b =>
                {
                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map");

                    b.Property<byte>("LevelMax")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("levelMax");

                    b.Property<byte>("LevelMin")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("levelMin");

                    b.Property<byte>("MaxPlayers")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxPlayers");

                    b.Property<byte>("MountAllowed")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("mountAllowed");

                    b.Property<ushort>("Parent")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("parent");

                    b.Property<uint>("ResetDelay")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("reset_delay")
                        .HasComment("Reset time in days");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''");

                    b.HasKey("Map")
                        .HasName("PRIMARY");

                    b.ToTable("instance_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ItemEnchantmentTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Ench")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("ench")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("Chance")
                        .HasColumnType("float unsigned")
                        .HasColumnName("chance");

                    b.HasKey("Entry", "Ench")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("item_enchantment_template", (string)null);

                    b.HasComment("Item Random Enchantment System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ItemLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("item_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ItemRequiredTarget", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry");

                    b.Property<uint>("TargetEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("targetEntry")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasIndex(new[] { "Entry", "Type", "TargetEntry" }, "entry_type_target")
                        .IsUnique();

                    b.ToTable("item_required_target", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ItemTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("AllowableClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("AllowableRace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("-1");

                    b.Property<byte>("AmmoType")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("ammo_type");

                    b.Property<byte>("ArcaneRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("arcane_res");

                    b.Property<uint>("Area")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("area")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("Armor")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("armor");

                    b.Property<float>("ArmorDamageModifier")
                        .HasColumnType("float");

                    b.Property<int>("BagFamily")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Block")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("block")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Bonding")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("bonding");

                    b.Property<byte>("BuyCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("BuyPrice")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<byte>("ContainerSlots")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("Delay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("delay")
                        .HasDefaultValueSql("'1000'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("DisenchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("DisenchantID")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Displayid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("displayid")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("DmgMax1")
                        .HasColumnType("float")
                        .HasColumnName("dmg_max1");

                    b.Property<float>("DmgMax2")
                        .HasColumnType("float")
                        .HasColumnName("dmg_max2");

                    b.Property<float>("DmgMax3")
                        .HasColumnType("float")
                        .HasColumnName("dmg_max3");

                    b.Property<float>("DmgMax4")
                        .HasColumnType("float")
                        .HasColumnName("dmg_max4");

                    b.Property<float>("DmgMax5")
                        .HasColumnType("float")
                        .HasColumnName("dmg_max5");

                    b.Property<float>("DmgMin1")
                        .HasColumnType("float")
                        .HasColumnName("dmg_min1");

                    b.Property<float>("DmgMin2")
                        .HasColumnType("float")
                        .HasColumnName("dmg_min2");

                    b.Property<float>("DmgMin3")
                        .HasColumnType("float")
                        .HasColumnName("dmg_min3");

                    b.Property<float>("DmgMin4")
                        .HasColumnType("float")
                        .HasColumnName("dmg_min4");

                    b.Property<float>("DmgMin5")
                        .HasColumnType("float")
                        .HasColumnName("dmg_min5");

                    b.Property<byte>("DmgType1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dmg_type1");

                    b.Property<byte>("DmgType2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dmg_type2");

                    b.Property<byte>("DmgType3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dmg_type3");

                    b.Property<byte>("DmgType4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dmg_type4");

                    b.Property<byte>("DmgType5")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("dmg_type5");

                    b.Property<uint>("Duration")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Duration in seconds");

                    b.Property<byte>("ExtraFlags")
                        .HasColumnType("tinyint(1) unsigned");

                    b.Property<byte>("FireRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("fire_res");

                    b.Property<uint>("Flags")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("FoodType")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("FrostRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("frost_res");

                    b.Property<int>("GemProperties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("HolyRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("holy_res");

                    b.Property<byte>("InventoryType")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("ItemLevel")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Itemset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("itemset")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("LanguageID");

                    b.Property<uint>("Lockid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("lockid")
                        .HasDefaultValueSql("'0'");

                    b.Property<short>("Map")
                        .HasColumnType("smallint(6)");

                    b.Property<sbyte>("Material")
                        .HasColumnType("tinyint(4)");

                    b.Property<ushort>("MaxDurability")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("MaxMoneyLoot")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("maxMoneyLoot");

                    b.Property<ushort>("Maxcount")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("maxcount");

                    b.Property<uint>("MinMoneyLoot")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("minMoneyLoot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<byte>("NatureRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("nature_res");

                    b.Property<byte>("PageMaterial")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("PageText")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Quality")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("RandomProperty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RandomSuffix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("RangedModRange")
                        .HasColumnType("float");

                    b.Property<uint>("RequiredCityRank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<short>("RequiredDisenchantSkill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasDefaultValueSql("-1");

                    b.Property<byte>("RequiredLevel")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("RequiredReputationFaction")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RequiredReputationRank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RequiredSkill")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RequiredSkillRank")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("Requiredhonorrank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("requiredhonorrank")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Requiredspell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("requiredspell")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("SellPrice")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("ShadowRes")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("shadow_res");

                    b.Property<byte>("Sheath")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("sheath");

                    b.Property<int>("SocketBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("socketBonus")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("SocketColor1")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("socketColor_1");

                    b.Property<sbyte>("SocketColor2")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("socketColor_2");

                    b.Property<sbyte>("SocketColor3")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("socketColor_3");

                    b.Property<int>("SocketContent1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("socketContent_1")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("SocketContent2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("socketContent_2")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("SocketContent3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("socketContent_3")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("Spellcategory1")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spellcategory_1");

                    b.Property<ushort>("Spellcategory2")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spellcategory_2");

                    b.Property<ushort>("Spellcategory3")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spellcategory_3");

                    b.Property<ushort>("Spellcategory4")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spellcategory_4");

                    b.Property<ushort>("Spellcategory5")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spellcategory_5");

                    b.Property<int>("Spellcategorycooldown1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcategorycooldown_1")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcategorycooldown2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcategorycooldown_2")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcategorycooldown3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcategorycooldown_3")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcategorycooldown4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcategorycooldown_4")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcategorycooldown5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcategorycooldown_5")
                        .HasDefaultValueSql("-1");

                    b.Property<sbyte>("Spellcharges1")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("spellcharges_1");

                    b.Property<sbyte>("Spellcharges2")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("spellcharges_2");

                    b.Property<sbyte>("Spellcharges3")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("spellcharges_3");

                    b.Property<sbyte>("Spellcharges4")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("spellcharges_4");

                    b.Property<sbyte>("Spellcharges5")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("spellcharges_5");

                    b.Property<int>("Spellcooldown1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcooldown_1")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcooldown2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcooldown_2")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcooldown3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcooldown_3")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcooldown4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcooldown_4")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("Spellcooldown5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("spellcooldown_5")
                        .HasDefaultValueSql("-1");

                    b.Property<uint>("Spellid1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellid_1")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellid2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellid_2")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellid3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellid_3")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellid4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellid_4")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellid5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellid_5")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("SpellppmRate1")
                        .HasColumnType("float")
                        .HasColumnName("spellppmRate_1");

                    b.Property<float>("SpellppmRate2")
                        .HasColumnType("float")
                        .HasColumnName("spellppmRate_2");

                    b.Property<float>("SpellppmRate3")
                        .HasColumnType("float")
                        .HasColumnName("spellppmRate_3");

                    b.Property<float>("SpellppmRate4")
                        .HasColumnType("float")
                        .HasColumnName("spellppmRate_4");

                    b.Property<float>("SpellppmRate5")
                        .HasColumnType("float")
                        .HasColumnName("spellppmRate_5");

                    b.Property<byte>("Spelltrigger1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spelltrigger_1");

                    b.Property<byte>("Spelltrigger2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spelltrigger_2");

                    b.Property<byte>("Spelltrigger3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spelltrigger_3");

                    b.Property<byte>("Spelltrigger4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spelltrigger_4");

                    b.Property<byte>("Spelltrigger5")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spelltrigger_5");

                    b.Property<ushort>("Stackable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("stackable")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("Startquest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("startquest")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("StatType1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type1");

                    b.Property<byte>("StatType10")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type10");

                    b.Property<byte>("StatType2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type2");

                    b.Property<byte>("StatType3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type3");

                    b.Property<byte>("StatType4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type4");

                    b.Property<byte>("StatType5")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type5");

                    b.Property<byte>("StatType6")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type6");

                    b.Property<byte>("StatType7")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type7");

                    b.Property<byte>("StatType8")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type8");

                    b.Property<byte>("StatType9")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("stat_type9");

                    b.Property<short>("StatValue1")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value1");

                    b.Property<short>("StatValue10")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value10");

                    b.Property<short>("StatValue2")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value2");

                    b.Property<short>("StatValue3")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value3");

                    b.Property<short>("StatValue4")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value4");

                    b.Property<short>("StatValue5")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value5");

                    b.Property<short>("StatValue6")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value6");

                    b.Property<short>("StatValue7")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value7");

                    b.Property<short>("StatValue8")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value8");

                    b.Property<short>("StatValue9")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stat_value9");

                    b.Property<byte>("Subclass")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("subclass");

                    b.Property<sbyte>("TotemCategory")
                        .HasColumnType("tinyint(4)");

                    b.Property<int>("Unk0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("unk0")
                        .HasDefaultValueSql("-1");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Class" }, "items_index");

                    b.ToTable("item_template", (string)null);

                    b.HasComment("Item System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesAreatriggerTeleport", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Entry of Areatrigger Teleport");

                    b.Property<string>("TextLoc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc1")
                        .HasComment("Text of the status_failed locale 1");

                    b.Property<string>("TextLoc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc2")
                        .HasComment("Text of the status_failed locale 2");

                    b.Property<string>("TextLoc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc3")
                        .HasComment("Text of the status_failed locale 3");

                    b.Property<string>("TextLoc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc4")
                        .HasComment("Text of the status_failed locale 4");

                    b.Property<string>("TextLoc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc5")
                        .HasComment("Text of the status_failed locale 5");

                    b.Property<string>("TextLoc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc6")
                        .HasComment("Text of the status_failed locale 6");

                    b.Property<string>("TextLoc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc7")
                        .HasComment("Text of the status_failed locale 7");

                    b.Property<string>("TextLoc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc8")
                        .HasComment("Text of the status_failed locale 8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_areatrigger_teleport", (string)null);

                    b.HasComment("Areatrigger System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesCreature", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("NameLoc1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc1")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc2")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc3")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc4")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc4")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc5")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc6")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc6")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc7")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc7")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc8")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc8")
                        .HasDefaultValueSql("''");

                    b.Property<string>("SubnameLoc1")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc1");

                    b.Property<string>("SubnameLoc2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc2");

                    b.Property<string>("SubnameLoc3")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc3");

                    b.Property<string>("SubnameLoc4")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc4");

                    b.Property<string>("SubnameLoc5")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc5");

                    b.Property<string>("SubnameLoc6")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc6");

                    b.Property<string>("SubnameLoc7")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc7");

                    b.Property<string>("SubnameLoc8")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subname_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_creature", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesGameobject", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CastbarcaptionLoc1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc1")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc2")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc3")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc4")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc4")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc5")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc6")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc6")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc7")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc7")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CastbarcaptionLoc8")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("castbarcaption_loc8")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc1")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc2")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc3")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc4")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc4")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc5")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc6")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc6")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc7")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc7")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc8")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc8")
                        .HasDefaultValueSql("''");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_gameobject", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesGossipMenuOption", b =>
                {
                    b.Property<ushort>("MenuId")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("menu_id");

                    b.Property<ushort>("Id")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BoxTextLoc1")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc1");

                    b.Property<string>("BoxTextLoc2")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc2");

                    b.Property<string>("BoxTextLoc3")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc3");

                    b.Property<string>("BoxTextLoc4")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc4");

                    b.Property<string>("BoxTextLoc5")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc5");

                    b.Property<string>("BoxTextLoc6")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc6");

                    b.Property<string>("BoxTextLoc7")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc7");

                    b.Property<string>("BoxTextLoc8")
                        .HasColumnType("text")
                        .HasColumnName("box_text_loc8");

                    b.Property<string>("OptionTextLoc1")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc1");

                    b.Property<string>("OptionTextLoc2")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc2");

                    b.Property<string>("OptionTextLoc3")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc3");

                    b.Property<string>("OptionTextLoc4")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc4");

                    b.Property<string>("OptionTextLoc5")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc5");

                    b.Property<string>("OptionTextLoc6")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc6");

                    b.Property<string>("OptionTextLoc7")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc7");

                    b.Property<string>("OptionTextLoc8")
                        .HasColumnType("text")
                        .HasColumnName("option_text_loc8");

                    b.HasKey("MenuId", "Id")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("locales_gossip_menu_option", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesItem", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("DescriptionLoc1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc1");

                    b.Property<string>("DescriptionLoc2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc2");

                    b.Property<string>("DescriptionLoc3")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc3");

                    b.Property<string>("DescriptionLoc4")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc4");

                    b.Property<string>("DescriptionLoc5")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc5");

                    b.Property<string>("DescriptionLoc6")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc6");

                    b.Property<string>("DescriptionLoc7")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc7");

                    b.Property<string>("DescriptionLoc8")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_loc8");

                    b.Property<string>("NameLoc1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc1")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc2")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc3")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc4")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc4")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc5")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc5")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc6")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc6")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc7")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc7")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NameLoc8")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc8")
                        .HasDefaultValueSql("''");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_item", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesNpcText", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Text00Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc1");

                    b.Property<string>("Text00Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc2");

                    b.Property<string>("Text00Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc3");

                    b.Property<string>("Text00Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc4");

                    b.Property<string>("Text00Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc5");

                    b.Property<string>("Text00Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc6");

                    b.Property<string>("Text00Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc7");

                    b.Property<string>("Text00Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_0_loc8");

                    b.Property<string>("Text01Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc1");

                    b.Property<string>("Text01Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc2");

                    b.Property<string>("Text01Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc3");

                    b.Property<string>("Text01Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc4");

                    b.Property<string>("Text01Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc5");

                    b.Property<string>("Text01Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc6");

                    b.Property<string>("Text01Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc7");

                    b.Property<string>("Text01Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text0_1_loc8");

                    b.Property<string>("Text10Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc1");

                    b.Property<string>("Text10Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc2");

                    b.Property<string>("Text10Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc3");

                    b.Property<string>("Text10Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc4");

                    b.Property<string>("Text10Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc5");

                    b.Property<string>("Text10Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc6");

                    b.Property<string>("Text10Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc7");

                    b.Property<string>("Text10Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_0_loc8");

                    b.Property<string>("Text11Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc1");

                    b.Property<string>("Text11Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc2");

                    b.Property<string>("Text11Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc3");

                    b.Property<string>("Text11Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc4");

                    b.Property<string>("Text11Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc5");

                    b.Property<string>("Text11Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc6");

                    b.Property<string>("Text11Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc7");

                    b.Property<string>("Text11Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text1_1_loc8");

                    b.Property<string>("Text20Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc1");

                    b.Property<string>("Text20Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc2");

                    b.Property<string>("Text20Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc3");

                    b.Property<string>("Text20Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc4");

                    b.Property<string>("Text20Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc5");

                    b.Property<string>("Text20Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc6");

                    b.Property<string>("Text20Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc7");

                    b.Property<string>("Text20Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_0_loc8");

                    b.Property<string>("Text21Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc1");

                    b.Property<string>("Text21Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc2");

                    b.Property<string>("Text21Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc3");

                    b.Property<string>("Text21Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc4");

                    b.Property<string>("Text21Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc5");

                    b.Property<string>("Text21Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc6");

                    b.Property<string>("Text21Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc7");

                    b.Property<string>("Text21Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text2_1_loc8");

                    b.Property<string>("Text30Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc1");

                    b.Property<string>("Text30Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc2");

                    b.Property<string>("Text30Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc3");

                    b.Property<string>("Text30Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc4");

                    b.Property<string>("Text30Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc5");

                    b.Property<string>("Text30Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc6");

                    b.Property<string>("Text30Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc7");

                    b.Property<string>("Text30Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_0_loc8");

                    b.Property<string>("Text31Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc1");

                    b.Property<string>("Text31Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc2");

                    b.Property<string>("Text31Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc3");

                    b.Property<string>("Text31Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc4");

                    b.Property<string>("Text31Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc5");

                    b.Property<string>("Text31Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc6");

                    b.Property<string>("Text31Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc7");

                    b.Property<string>("Text31Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text3_1_loc8");

                    b.Property<string>("Text40Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc1");

                    b.Property<string>("Text40Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc2");

                    b.Property<string>("Text40Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc3");

                    b.Property<string>("Text40Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc4");

                    b.Property<string>("Text40Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc5");

                    b.Property<string>("Text40Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc6");

                    b.Property<string>("Text40Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc7");

                    b.Property<string>("Text40Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_0_loc8");

                    b.Property<string>("Text41Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc1");

                    b.Property<string>("Text41Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc2");

                    b.Property<string>("Text41Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc3");

                    b.Property<string>("Text41Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc4");

                    b.Property<string>("Text41Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc5");

                    b.Property<string>("Text41Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc6");

                    b.Property<string>("Text41Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc7");

                    b.Property<string>("Text41Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text4_1_loc8");

                    b.Property<string>("Text50Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc1");

                    b.Property<string>("Text50Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc2");

                    b.Property<string>("Text50Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc3");

                    b.Property<string>("Text50Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc4");

                    b.Property<string>("Text50Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc5");

                    b.Property<string>("Text50Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc6");

                    b.Property<string>("Text50Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc7");

                    b.Property<string>("Text50Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_0_loc8");

                    b.Property<string>("Text51Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc1");

                    b.Property<string>("Text51Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc2");

                    b.Property<string>("Text51Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc3");

                    b.Property<string>("Text51Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc4");

                    b.Property<string>("Text51Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc5");

                    b.Property<string>("Text51Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc6");

                    b.Property<string>("Text51Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc7");

                    b.Property<string>("Text51Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text5_1_loc8");

                    b.Property<string>("Text60Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc1");

                    b.Property<string>("Text60Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc2");

                    b.Property<string>("Text60Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc3");

                    b.Property<string>("Text60Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc4");

                    b.Property<string>("Text60Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc5");

                    b.Property<string>("Text60Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc6");

                    b.Property<string>("Text60Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc7");

                    b.Property<string>("Text60Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_0_loc8");

                    b.Property<string>("Text61Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc1");

                    b.Property<string>("Text61Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc2");

                    b.Property<string>("Text61Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc3");

                    b.Property<string>("Text61Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc4");

                    b.Property<string>("Text61Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc5");

                    b.Property<string>("Text61Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc6");

                    b.Property<string>("Text61Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc7");

                    b.Property<string>("Text61Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text6_1_loc8");

                    b.Property<string>("Text70Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc1");

                    b.Property<string>("Text70Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc2");

                    b.Property<string>("Text70Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc3");

                    b.Property<string>("Text70Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc4");

                    b.Property<string>("Text70Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc5");

                    b.Property<string>("Text70Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc6");

                    b.Property<string>("Text70Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc7");

                    b.Property<string>("Text70Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_0_loc8");

                    b.Property<string>("Text71Loc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc1");

                    b.Property<string>("Text71Loc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc2");

                    b.Property<string>("Text71Loc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc3");

                    b.Property<string>("Text71Loc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc4");

                    b.Property<string>("Text71Loc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc5");

                    b.Property<string>("Text71Loc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc6");

                    b.Property<string>("Text71Loc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc7");

                    b.Property<string>("Text71Loc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text7_1_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_npc_text", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesPageText", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("TextLoc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc1");

                    b.Property<string>("TextLoc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc2");

                    b.Property<string>("TextLoc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc3");

                    b.Property<string>("TextLoc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc4");

                    b.Property<string>("TextLoc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc5");

                    b.Property<string>("TextLoc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc6");

                    b.Property<string>("TextLoc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc7");

                    b.Property<string>("TextLoc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_page_text", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesPointsOfInterest", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("IconNameLoc1")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc1");

                    b.Property<string>("IconNameLoc2")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc2");

                    b.Property<string>("IconNameLoc3")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc3");

                    b.Property<string>("IconNameLoc4")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc4");

                    b.Property<string>("IconNameLoc5")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc5");

                    b.Property<string>("IconNameLoc6")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc6");

                    b.Property<string>("IconNameLoc7")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc7");

                    b.Property<string>("IconNameLoc8")
                        .HasColumnType("text")
                        .HasColumnName("icon_name_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_points_of_interest", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesQuest", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("DetailsLoc1")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc1");

                    b.Property<string>("DetailsLoc2")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc2");

                    b.Property<string>("DetailsLoc3")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc3");

                    b.Property<string>("DetailsLoc4")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc4");

                    b.Property<string>("DetailsLoc5")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc5");

                    b.Property<string>("DetailsLoc6")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc6");

                    b.Property<string>("DetailsLoc7")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc7");

                    b.Property<string>("DetailsLoc8")
                        .HasColumnType("text")
                        .HasColumnName("Details_loc8");

                    b.Property<string>("EndTextLoc1")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc1");

                    b.Property<string>("EndTextLoc2")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc2");

                    b.Property<string>("EndTextLoc3")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc3");

                    b.Property<string>("EndTextLoc4")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc4");

                    b.Property<string>("EndTextLoc5")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc5");

                    b.Property<string>("EndTextLoc6")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc6");

                    b.Property<string>("EndTextLoc7")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc7");

                    b.Property<string>("EndTextLoc8")
                        .HasColumnType("text")
                        .HasColumnName("EndText_loc8");

                    b.Property<string>("ObjectiveText1Loc1")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc1");

                    b.Property<string>("ObjectiveText1Loc2")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc2");

                    b.Property<string>("ObjectiveText1Loc3")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc3");

                    b.Property<string>("ObjectiveText1Loc4")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc4");

                    b.Property<string>("ObjectiveText1Loc5")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc5");

                    b.Property<string>("ObjectiveText1Loc6")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc6");

                    b.Property<string>("ObjectiveText1Loc7")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc7");

                    b.Property<string>("ObjectiveText1Loc8")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText1_loc8");

                    b.Property<string>("ObjectiveText2Loc1")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc1");

                    b.Property<string>("ObjectiveText2Loc2")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc2");

                    b.Property<string>("ObjectiveText2Loc3")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc3");

                    b.Property<string>("ObjectiveText2Loc4")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc4");

                    b.Property<string>("ObjectiveText2Loc5")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc5");

                    b.Property<string>("ObjectiveText2Loc6")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc6");

                    b.Property<string>("ObjectiveText2Loc7")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc7");

                    b.Property<string>("ObjectiveText2Loc8")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText2_loc8");

                    b.Property<string>("ObjectiveText3Loc1")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc1");

                    b.Property<string>("ObjectiveText3Loc2")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc2");

                    b.Property<string>("ObjectiveText3Loc3")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc3");

                    b.Property<string>("ObjectiveText3Loc4")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc4");

                    b.Property<string>("ObjectiveText3Loc5")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc5");

                    b.Property<string>("ObjectiveText3Loc6")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc6");

                    b.Property<string>("ObjectiveText3Loc7")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc7");

                    b.Property<string>("ObjectiveText3Loc8")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText3_loc8");

                    b.Property<string>("ObjectiveText4Loc1")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc1");

                    b.Property<string>("ObjectiveText4Loc2")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc2");

                    b.Property<string>("ObjectiveText4Loc3")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc3");

                    b.Property<string>("ObjectiveText4Loc4")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc4");

                    b.Property<string>("ObjectiveText4Loc5")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc5");

                    b.Property<string>("ObjectiveText4Loc6")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc6");

                    b.Property<string>("ObjectiveText4Loc7")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc7");

                    b.Property<string>("ObjectiveText4Loc8")
                        .HasColumnType("text")
                        .HasColumnName("ObjectiveText4_loc8");

                    b.Property<string>("ObjectivesLoc1")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc1");

                    b.Property<string>("ObjectivesLoc2")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc2");

                    b.Property<string>("ObjectivesLoc3")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc3");

                    b.Property<string>("ObjectivesLoc4")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc4");

                    b.Property<string>("ObjectivesLoc5")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc5");

                    b.Property<string>("ObjectivesLoc6")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc6");

                    b.Property<string>("ObjectivesLoc7")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc7");

                    b.Property<string>("ObjectivesLoc8")
                        .HasColumnType("text")
                        .HasColumnName("Objectives_loc8");

                    b.Property<string>("OfferRewardTextLoc1")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc1");

                    b.Property<string>("OfferRewardTextLoc2")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc2");

                    b.Property<string>("OfferRewardTextLoc3")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc3");

                    b.Property<string>("OfferRewardTextLoc4")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc4");

                    b.Property<string>("OfferRewardTextLoc5")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc5");

                    b.Property<string>("OfferRewardTextLoc6")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc6");

                    b.Property<string>("OfferRewardTextLoc7")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc7");

                    b.Property<string>("OfferRewardTextLoc8")
                        .HasColumnType("text")
                        .HasColumnName("OfferRewardText_loc8");

                    b.Property<string>("RequestItemsTextLoc1")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc1");

                    b.Property<string>("RequestItemsTextLoc2")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc2");

                    b.Property<string>("RequestItemsTextLoc3")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc3");

                    b.Property<string>("RequestItemsTextLoc4")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc4");

                    b.Property<string>("RequestItemsTextLoc5")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc5");

                    b.Property<string>("RequestItemsTextLoc6")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc6");

                    b.Property<string>("RequestItemsTextLoc7")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc7");

                    b.Property<string>("RequestItemsTextLoc8")
                        .HasColumnType("text")
                        .HasColumnName("RequestItemsText_loc8");

                    b.Property<string>("TitleLoc1")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc1");

                    b.Property<string>("TitleLoc2")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc2");

                    b.Property<string>("TitleLoc3")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc3");

                    b.Property<string>("TitleLoc4")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc4");

                    b.Property<string>("TitleLoc5")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc5");

                    b.Property<string>("TitleLoc6")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc6");

                    b.Property<string>("TitleLoc7")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc7");

                    b.Property<string>("TitleLoc8")
                        .HasColumnType("text")
                        .HasColumnName("Title_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_quest", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesQuestgiverGreeting", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Entry of Questgiver");

                    b.Property<uint>("Type")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Type of entry");

                    b.Property<string>("TextLoc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc1")
                        .HasComment("Text of the greeting locale 1");

                    b.Property<string>("TextLoc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc2")
                        .HasComment("Text of the greeting locale 2");

                    b.Property<string>("TextLoc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc3")
                        .HasComment("Text of the greeting locale 3");

                    b.Property<string>("TextLoc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc4")
                        .HasComment("Text of the greeting locale 4");

                    b.Property<string>("TextLoc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc5")
                        .HasComment("Text of the greeting locale 5");

                    b.Property<string>("TextLoc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc6")
                        .HasComment("Text of the greeting locale 6");

                    b.Property<string>("TextLoc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc7")
                        .HasComment("Text of the greeting locale 7");

                    b.Property<string>("TextLoc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc8")
                        .HasComment("Text of the greeting locale 8");

                    b.HasKey("Entry", "Type")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("locales_questgiver_greeting", (string)null);

                    b.HasComment("Quest and Gossip system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.LocalesTrainerGreeting", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Entry of Trainer");

                    b.Property<string>("TextLoc1")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc1")
                        .HasComment("Text of the greeting locale 1");

                    b.Property<string>("TextLoc2")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc2")
                        .HasComment("Text of the greeting locale 2");

                    b.Property<string>("TextLoc3")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc3")
                        .HasComment("Text of the greeting locale 3");

                    b.Property<string>("TextLoc4")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc4")
                        .HasComment("Text of the greeting locale 4");

                    b.Property<string>("TextLoc5")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc5")
                        .HasComment("Text of the greeting locale 5");

                    b.Property<string>("TextLoc6")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc6")
                        .HasComment("Text of the greeting locale 6");

                    b.Property<string>("TextLoc7")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc7")
                        .HasComment("Text of the greeting locale 7");

                    b.Property<string>("TextLoc8")
                        .HasColumnType("longtext")
                        .HasColumnName("Text_loc8")
                        .HasComment("Text of the greeting locale 8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("locales_trainer_greeting", (string)null);

                    b.HasComment("Trainer system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.MailLevelReward", b =>
                {
                    b.Property<uint>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("level")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RaceMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("raceMask")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("MailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mailTemplateId")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("SenderEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("senderEntry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Level", "RaceMask")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("mail_level_reward", (string)null);

                    b.HasComment("Mail System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.MailLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("mail_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.MangosString", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("mangos_string", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcGossip", b =>
                {
                    b.Property<uint>("NpcGuid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc_guid");

                    b.Property<uint>("Textid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("textid")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("NpcGuid")
                        .HasName("PRIMARY");

                    b.ToTable("npc_gossip", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcText", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("Em00")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_0");

                    b.Property<ushort>("Em01")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_1");

                    b.Property<ushort>("Em02")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_2");

                    b.Property<ushort>("Em03")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_3");

                    b.Property<ushort>("Em04")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_4");

                    b.Property<ushort>("Em05")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em0_5");

                    b.Property<ushort>("Em10")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_0");

                    b.Property<ushort>("Em11")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_1");

                    b.Property<ushort>("Em12")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_2");

                    b.Property<ushort>("Em13")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_3");

                    b.Property<ushort>("Em14")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_4");

                    b.Property<ushort>("Em15")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em1_5");

                    b.Property<ushort>("Em20")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_0");

                    b.Property<ushort>("Em21")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_1");

                    b.Property<ushort>("Em22")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_2");

                    b.Property<ushort>("Em23")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_3");

                    b.Property<ushort>("Em24")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_4");

                    b.Property<ushort>("Em25")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em2_5");

                    b.Property<ushort>("Em30")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_0");

                    b.Property<ushort>("Em31")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_1");

                    b.Property<ushort>("Em32")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_2");

                    b.Property<ushort>("Em33")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_3");

                    b.Property<ushort>("Em34")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_4");

                    b.Property<ushort>("Em35")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em3_5");

                    b.Property<ushort>("Em40")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_0");

                    b.Property<ushort>("Em41")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_1");

                    b.Property<ushort>("Em42")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_2");

                    b.Property<ushort>("Em43")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_3");

                    b.Property<ushort>("Em44")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_4");

                    b.Property<ushort>("Em45")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em4_5");

                    b.Property<ushort>("Em50")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_0");

                    b.Property<ushort>("Em51")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_1");

                    b.Property<ushort>("Em52")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_2");

                    b.Property<ushort>("Em53")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_3");

                    b.Property<ushort>("Em54")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_4");

                    b.Property<ushort>("Em55")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em5_5");

                    b.Property<ushort>("Em60")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_0");

                    b.Property<ushort>("Em61")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_1");

                    b.Property<ushort>("Em62")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_2");

                    b.Property<ushort>("Em63")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_3");

                    b.Property<ushort>("Em64")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_4");

                    b.Property<ushort>("Em65")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em6_5");

                    b.Property<ushort>("Em70")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_0");

                    b.Property<ushort>("Em71")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_1");

                    b.Property<ushort>("Em72")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_2");

                    b.Property<ushort>("Em73")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_3");

                    b.Property<ushort>("Em74")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_4");

                    b.Property<ushort>("Em75")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("em7_5");

                    b.Property<byte>("Lang0")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang0");

                    b.Property<byte>("Lang1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang1");

                    b.Property<byte>("Lang2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang2");

                    b.Property<byte>("Lang3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang3");

                    b.Property<byte>("Lang4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang4");

                    b.Property<byte>("Lang5")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang5");

                    b.Property<byte>("Lang6")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang6");

                    b.Property<byte>("Lang7")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("lang7");

                    b.Property<float>("Prob0")
                        .HasColumnType("float")
                        .HasColumnName("prob0");

                    b.Property<float>("Prob1")
                        .HasColumnType("float")
                        .HasColumnName("prob1");

                    b.Property<float>("Prob2")
                        .HasColumnType("float")
                        .HasColumnName("prob2");

                    b.Property<float>("Prob3")
                        .HasColumnType("float")
                        .HasColumnName("prob3");

                    b.Property<float>("Prob4")
                        .HasColumnType("float")
                        .HasColumnName("prob4");

                    b.Property<float>("Prob5")
                        .HasColumnType("float")
                        .HasColumnName("prob5");

                    b.Property<float>("Prob6")
                        .HasColumnType("float")
                        .HasColumnName("prob6");

                    b.Property<float>("Prob7")
                        .HasColumnType("float")
                        .HasColumnName("prob7");

                    b.Property<string>("Text00")
                        .HasColumnType("longtext")
                        .HasColumnName("text0_0");

                    b.Property<string>("Text01")
                        .HasColumnType("longtext")
                        .HasColumnName("text0_1");

                    b.Property<string>("Text10")
                        .HasColumnType("longtext")
                        .HasColumnName("text1_0");

                    b.Property<string>("Text11")
                        .HasColumnType("longtext")
                        .HasColumnName("text1_1");

                    b.Property<string>("Text20")
                        .HasColumnType("longtext")
                        .HasColumnName("text2_0");

                    b.Property<string>("Text21")
                        .HasColumnType("longtext")
                        .HasColumnName("text2_1");

                    b.Property<string>("Text30")
                        .HasColumnType("longtext")
                        .HasColumnName("text3_0");

                    b.Property<string>("Text31")
                        .HasColumnType("longtext")
                        .HasColumnName("text3_1");

                    b.Property<string>("Text40")
                        .HasColumnType("longtext")
                        .HasColumnName("text4_0");

                    b.Property<string>("Text41")
                        .HasColumnType("longtext")
                        .HasColumnName("text4_1");

                    b.Property<string>("Text50")
                        .HasColumnType("longtext")
                        .HasColumnName("text5_0");

                    b.Property<string>("Text51")
                        .HasColumnType("longtext")
                        .HasColumnName("text5_1");

                    b.Property<string>("Text60")
                        .HasColumnType("longtext")
                        .HasColumnName("text6_0");

                    b.Property<string>("Text61")
                        .HasColumnType("longtext")
                        .HasColumnName("text6_1");

                    b.Property<string>("Text70")
                        .HasColumnType("longtext")
                        .HasColumnName("text7_0");

                    b.Property<string>("Text71")
                        .HasColumnType("longtext")
                        .HasColumnName("text7_1");

                    b.HasKey("Id");

                    b.ToTable("npc_text", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcTextBroadcastText", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasComment("Identifier");

                    b.Property<int>("BroadcastTextId0")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId1")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId2")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId3")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId4")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId5")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId6")
                        .HasColumnType("int(11)");

                    b.Property<int>("BroadcastTextId7")
                        .HasColumnType("int(11)");

                    b.Property<float>("Prob0")
                        .HasColumnType("float");

                    b.Property<float>("Prob1")
                        .HasColumnType("float");

                    b.Property<float>("Prob2")
                        .HasColumnType("float");

                    b.Property<float>("Prob3")
                        .HasColumnType("float");

                    b.Property<float>("Prob4")
                        .HasColumnType("float");

                    b.Property<float>("Prob5")
                        .HasColumnType("float");

                    b.Property<float>("Prob6")
                        .HasColumnType("float");

                    b.Property<float>("Prob7")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("npc_text_broadcast_text", (string)null);

                    b.HasComment("Broadcast Text npc_text equivalent");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcTrainer", b =>
                {
                    b.Property<uint>("ConditionId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("condition_id");

                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Reqlevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("reqlevel");

                    b.Property<ushort>("Reqskill")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("reqskill");

                    b.Property<ushort>("Reqskillvalue")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("reqskillvalue");

                    b.Property<uint>("Spell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellcost")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spellcost");

                    b.HasIndex(new[] { "Entry", "Spell" }, "entry_spell")
                        .IsUnique();

                    b.ToTable("npc_trainer", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcTrainerTemplate", b =>
                {
                    b.Property<uint>("ConditionId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("condition_id");

                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Reqlevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("reqlevel");

                    b.Property<ushort>("Reqskill")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("reqskill");

                    b.Property<ushort>("Reqskillvalue")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("reqskillvalue");

                    b.Property<uint>("Spell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spellcost")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spellcost");

                    b.HasIndex(new[] { "Entry", "Spell" }, "entry_spell")
                        .IsUnique();

                    b.ToTable("npc_trainer_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcVendor", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ExtendedCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Incrtime")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("incrtime");

                    b.Property<byte>("Maxcount")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("slot");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("npc_vendor", (string)null);

                    b.HasComment("Npc System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.NpcVendorTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ExtendedCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Incrtime")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("incrtime");

                    b.Property<byte>("Maxcount")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("slot");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("npc_vendor_template", (string)null);

                    b.HasComment("Npc System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PageText", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("NextPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("next_page")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("text");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("page_text", (string)null);

                    b.HasComment("Item System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PetcreateinfoSpell", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Spell4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("petcreateinfo_spell", (string)null);

                    b.HasComment("Pet Create Spells");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PetLevelstat", b =>
                {
                    b.Property<uint>("CreatureEntry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("creature_entry");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("level");

                    b.Property<ushort>("Agi")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("agi");

                    b.Property<uint>("Armor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("armor");

                    b.Property<ushort>("Hp")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("hp");

                    b.Property<ushort>("Inte")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("inte");

                    b.Property<ushort>("Mana")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("mana");

                    b.Property<ushort>("Spi")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("spi");

                    b.Property<ushort>("Sta")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("sta");

                    b.Property<ushort>("Str")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("str");

                    b.HasKey("CreatureEntry", "Level")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("pet_levelstats", (string)null);

                    b.HasComment("Stores pet levels stats.");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PetNameGeneration", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Half")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("half");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("word");

                    b.HasKey("Id");

                    b.ToTable("pet_name_generation", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PickpocketingLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("pickpocketing_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayerClasslevelstat", b =>
                {
                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("level");

                    b.Property<ushort>("Basehp")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("basehp");

                    b.Property<ushort>("Basemana")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("basemana");

                    b.HasKey("Class", "Level")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("player_classlevelstats", (string)null);

                    b.HasComment("Stores levels stats.");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Playercreateinfo", b =>
                {
                    b.Property<byte>("Race")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("race");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map");

                    b.Property<float>("Orientation")
                        .HasColumnType("float")
                        .HasColumnName("orientation");

                    b.Property<float>("PositionX")
                        .HasColumnType("float")
                        .HasColumnName("position_x");

                    b.Property<float>("PositionY")
                        .HasColumnType("float")
                        .HasColumnName("position_y");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float")
                        .HasColumnName("position_z");

                    b.Property<uint>("Zone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("zone")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Race", "Class")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("playercreateinfo", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayercreateinfoAction", b =>
                {
                    b.Property<byte>("Race")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("race");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<ushort>("Button")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("button");

                    b.Property<uint>("Action")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("action");

                    b.Property<ushort>("Type")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Race", "Class", "Button")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("playercreateinfo_action", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayercreateinfoItem", b =>
                {
                    b.Property<byte>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("amount")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<uint>("Itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("itemid")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Race")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("race");

                    b.HasIndex(new[] { "Race", "Class" }, "playercreateinfo_race_class_index");

                    b.ToTable("playercreateinfo_item", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayercreateinfoSkill", b =>
                {
                    b.Property<uint>("RaceMask")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("raceMask");

                    b.Property<uint>("ClassMask")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("classMask");

                    b.Property<ushort>("Skill")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("skill");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<ushort>("Step")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("step");

                    b.HasKey("RaceMask", "ClassMask", "Skill")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("playercreateinfo_skills", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayercreateinfoSpell", b =>
                {
                    b.Property<byte>("Race")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("race");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<uint>("Spell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Race", "Class", "Spell")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("playercreateinfo_spell", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayerLevelstat", b =>
                {
                    b.Property<byte>("Race")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("race");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("class");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("level");

                    b.Property<byte>("Agi")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("agi");

                    b.Property<byte>("Inte")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("inte");

                    b.Property<byte>("Spi")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("spi");

                    b.Property<byte>("Sta")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("sta");

                    b.Property<byte>("Str")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("str");

                    b.HasKey("Race", "Class", "Level")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("player_levelstats", (string)null);

                    b.HasComment("Stores levels stats.");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PlayerXpForLevel", b =>
                {
                    b.Property<uint>("Lvl")
                        .HasColumnType("int(3) unsigned")
                        .HasColumnName("lvl");

                    b.Property<uint>("XpForNextLevel")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("xp_for_next_level");

                    b.HasKey("Lvl")
                        .HasName("PRIMARY");

                    b.ToTable("player_xp_for_level", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PointsOfInterest", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("data")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("flags")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Icon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("icon")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_name");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("points_of_interest", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolCreature", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<float>("Chance")
                        .HasColumnType("float unsigned")
                        .HasColumnName("chance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("PoolEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pool_entry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PoolEntry" }, "pool_idx");

                    b.ToTable("pool_creature", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolCreatureTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<float>("Chance")
                        .HasColumnType("float unsigned")
                        .HasColumnName("chance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("PoolEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pool_entry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PoolEntry" }, "pool_idx")
                        .HasDatabaseName("pool_idx1");

                    b.ToTable("pool_creature_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolGameobject", b =>
                {
                    b.Property<uint>("Guid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("guid");

                    b.Property<float>("Chance")
                        .HasColumnType("float unsigned")
                        .HasColumnName("chance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("PoolEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pool_entry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Guid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PoolEntry" }, "pool_idx")
                        .HasDatabaseName("pool_idx2");

                    b.ToTable("pool_gameobject", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolGameobjectTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<float>("Chance")
                        .HasColumnType("float unsigned")
                        .HasColumnName("chance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("PoolEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pool_entry")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PoolEntry" }, "pool_idx")
                        .HasDatabaseName("pool_idx3");

                    b.ToTable("pool_gameobject_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolPool", b =>
                {
                    b.Property<uint>("PoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pool_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("Chance")
                        .HasColumnType("float")
                        .HasColumnName("chance");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("MotherPool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("mother_pool")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("PoolId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MotherPool" }, "pool_idx")
                        .HasDatabaseName("pool_idx4");

                    b.ToTable("pool_pool", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.PoolTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Pool entry");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("MaxLimit")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("max_limit")
                        .HasComment("Max number of objects (0) is no limit");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("pool_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ProspectingLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("prospecting_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.QuestgiverGreeting", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Entry of Questgiver");

                    b.Property<uint>("Type")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Type of entry");

                    b.Property<uint>("EmoteDelay")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Emote delay of the greeting");

                    b.Property<uint>("EmoteId")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Emote ID of greeting");

                    b.Property<string>("Text")
                        .HasColumnType("longtext")
                        .HasComment("Text of the greeting");

                    b.HasKey("Entry", "Type")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("questgiver_greeting", (string)null);

                    b.HasComment("Quest and Gossip system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.QuestTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("BreadcrumbForQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("CharTitleId")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<ushort>("CompleteEmote")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("CompleteScript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<ushort>("DetailsEmote1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("DetailsEmote2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("DetailsEmote3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("DetailsEmote4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("DetailsEmoteDelay1")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("DetailsEmoteDelay2")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("DetailsEmoteDelay3")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("DetailsEmoteDelay4")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("EndText")
                        .HasColumnType("text");

                    b.Property<int>("ExclusiveGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("IncompleteEmote")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("LimitTime")
                        .HasColumnType("int(10) unsigned");

                    b.Property<byte>("MaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'255'");

                    b.Property<byte>("Method")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'2'");

                    b.Property<byte>("MinLevel")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<int>("NextQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("NextQuestInChain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("ObjectiveText1")
                        .HasColumnType("text");

                    b.Property<string>("ObjectiveText2")
                        .HasColumnType("text");

                    b.Property<string>("ObjectiveText3")
                        .HasColumnType("text");

                    b.Property<string>("ObjectiveText4")
                        .HasColumnType("text");

                    b.Property<string>("Objectives")
                        .HasColumnType("text");

                    b.Property<ushort>("OfferRewardEmote1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("OfferRewardEmote2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("OfferRewardEmote3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("OfferRewardEmote4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("OfferRewardEmoteDelay1")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("OfferRewardEmoteDelay2")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("OfferRewardEmoteDelay3")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("OfferRewardEmoteDelay4")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("OfferRewardText")
                        .HasColumnType("text");

                    b.Property<ushort>("PointMapId")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("PointOpt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("PointX")
                        .HasColumnType("float");

                    b.Property<float>("PointY")
                        .HasColumnType("float");

                    b.Property<int>("PrevQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("QuestFlags")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<short>("QuestLevel")
                        .HasColumnType("smallint(6)");

                    b.Property<ushort>("RepObjectiveFaction")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<int>("RepObjectiveValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("ReqCreatureOrGocount1")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("ReqCreatureOrGOCount1");

                    b.Property<ushort>("ReqCreatureOrGocount2")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("ReqCreatureOrGOCount2");

                    b.Property<ushort>("ReqCreatureOrGocount3")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("ReqCreatureOrGOCount3");

                    b.Property<ushort>("ReqCreatureOrGocount4")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("ReqCreatureOrGOCount4");

                    b.Property<int>("ReqCreatureOrGoid1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("ReqCreatureOrGOId1")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ReqCreatureOrGoid2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("ReqCreatureOrGOId2")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ReqCreatureOrGoid3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("ReqCreatureOrGOId3")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ReqCreatureOrGoid4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("ReqCreatureOrGOId4")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("ReqItemCount1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqItemCount2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqItemCount3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqItemCount4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("ReqItemId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqItemId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqItemId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqItemId4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("ReqSourceCount1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqSourceCount2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqSourceCount3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("ReqSourceCount4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("ReqSourceId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSourceId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSourceId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSourceId4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSpellCast1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSpellCast2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSpellCast3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ReqSpellCast4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("RequestItemsText")
                        .HasColumnType("text");

                    b.Property<ushort>("RequiredClasses")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("RequiredCondition")
                        .HasColumnType("int(11) unsigned");

                    b.Property<ushort>("RequiredMaxRepFaction")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<int>("RequiredMaxRepValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("RequiredMinRepFaction")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<int>("RequiredMinRepValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("RequiredRaces")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RequiredSkill")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RequiredSkillValue")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount5")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewChoiceItemCount6")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("RewChoiceItemId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewChoiceItemId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewChoiceItemId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewChoiceItemId4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewChoiceItemId5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewChoiceItemId6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewHonorableKills")
                        .HasColumnType("int(10) unsigned");

                    b.Property<ushort>("RewItemCount1")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewItemCount2")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewItemCount3")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<ushort>("RewItemCount4")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<uint>("RewItemId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewItemId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewItemId3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewItemId4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewMailDelaySecs")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("RewMailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewMaxRepValue1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'42999'");

                    b.Property<int>("RewMaxRepValue2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'42999'");

                    b.Property<int>("RewMaxRepValue3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'42999'");

                    b.Property<int>("RewMaxRepValue4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'42999'");

                    b.Property<int>("RewMaxRepValue5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'42999'");

                    b.Property<uint>("RewMoneyMaxLevel")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("RewOrReqMoney")
                        .HasColumnType("int(11)");

                    b.Property<ushort>("RewRepFaction1")
                        .HasColumnType("smallint(5) unsigned")
                        .HasComment("faction id from Faction.dbc in this case");

                    b.Property<ushort>("RewRepFaction2")
                        .HasColumnType("smallint(5) unsigned")
                        .HasComment("faction id from Faction.dbc in this case");

                    b.Property<ushort>("RewRepFaction3")
                        .HasColumnType("smallint(5) unsigned")
                        .HasComment("faction id from Faction.dbc in this case");

                    b.Property<ushort>("RewRepFaction4")
                        .HasColumnType("smallint(5) unsigned")
                        .HasComment("faction id from Faction.dbc in this case");

                    b.Property<ushort>("RewRepFaction5")
                        .HasColumnType("smallint(5) unsigned")
                        .HasComment("faction id from Faction.dbc in this case");

                    b.Property<int>("RewRepValue1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewRepValue2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewRepValue3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewRepValue4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("RewRepValue5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("RewSpellCast")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("SpecialFlags")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<byte>("SrcItemCount")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("SrcItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("SrcSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("StartScript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("SuggestedPlayers")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<ushort>("Type")
                        .HasColumnType("smallint(5) unsigned");

                    b.Property<short>("ZoneOrSort")
                        .HasColumnType("smallint(6)");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("quest_template", (string)null);

                    b.HasComment("Quest System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ReferenceLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("reference_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ReputationRewardRate", b =>
                {
                    b.Property<uint>("Faction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("faction")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("CreatureRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("creature_rate")
                        .HasDefaultValueSql("'1'");

                    b.Property<float>("QuestRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("quest_rate")
                        .HasDefaultValueSql("'1'");

                    b.Property<float>("SpellRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("spell_rate")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Faction")
                        .HasName("PRIMARY");

                    b.ToTable("reputation_reward_rate", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ReputationSpilloverTemplate", b =>
                {
                    b.Property<ushort>("Faction")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("faction")
                        .HasComment("faction entry");

                    b.Property<ushort>("Faction1")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("faction1")
                        .HasComment("faction to give spillover for");

                    b.Property<ushort>("Faction2")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("faction2");

                    b.Property<ushort>("Faction3")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("faction3");

                    b.Property<ushort>("Faction4")
                        .HasColumnType("smallint(6) unsigned")
                        .HasColumnName("faction4");

                    b.Property<byte>("Rank1")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rank_1")
                        .HasComment("max rank, above this will not give any spillover");

                    b.Property<byte>("Rank2")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rank_2");

                    b.Property<byte>("Rank3")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rank_3");

                    b.Property<byte>("Rank4")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rank_4");

                    b.Property<float>("Rate1")
                        .HasColumnType("float")
                        .HasColumnName("rate_1")
                        .HasComment("the given rep points * rate");

                    b.Property<float>("Rate2")
                        .HasColumnType("float")
                        .HasColumnName("rate_2");

                    b.Property<float>("Rate3")
                        .HasColumnType("float")
                        .HasColumnName("rate_3");

                    b.Property<float>("Rate4")
                        .HasColumnType("float")
                        .HasColumnName("rate_4");

                    b.HasKey("Faction")
                        .HasName("PRIMARY");

                    b.ToTable("reputation_spillover_template", (string)null);

                    b.HasComment("Reputation spillover reputation gain");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ReservedName", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("reserved_name", (string)null);

                    b.HasComment("Player Reserved Names");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ScriptedAreatrigger", b =>
                {
                    b.Property<int>("Entry")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("entry");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .IsFixedLength();

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("scripted_areatrigger", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ScriptedEventId", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("id");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("scripted_event_id", (string)null);

                    b.HasComment("Script library scripted events");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ScriptText", b =>
                {
                    b.Property<int>("Entry")
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("entry");

                    b.Property<int>("BroadcastTextId")
                        .HasColumnType("int(11)")
                        .HasColumnName("broadcast_text_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("ContentDefault")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_default");

                    b.Property<string>("ContentLoc1")
                        .HasColumnType("text")
                        .HasColumnName("content_loc1");

                    b.Property<string>("ContentLoc2")
                        .HasColumnType("text")
                        .HasColumnName("content_loc2");

                    b.Property<string>("ContentLoc3")
                        .HasColumnType("text")
                        .HasColumnName("content_loc3");

                    b.Property<string>("ContentLoc4")
                        .HasColumnType("text")
                        .HasColumnName("content_loc4");

                    b.Property<string>("ContentLoc5")
                        .HasColumnType("text")
                        .HasColumnName("content_loc5");

                    b.Property<string>("ContentLoc6")
                        .HasColumnType("text")
                        .HasColumnName("content_loc6");

                    b.Property<string>("ContentLoc7")
                        .HasColumnType("text")
                        .HasColumnName("content_loc7");

                    b.Property<string>("ContentLoc8")
                        .HasColumnType("text")
                        .HasColumnName("content_loc8");

                    b.Property<ushort>("Emote")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("emote");

                    b.Property<byte>("Language")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("language");

                    b.Property<uint>("Sound")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("sound")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("script_texts", (string)null);

                    b.HasComment("Script Texts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.ScriptWaypoint", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'")
                        .HasComment("creature_template entry");

                    b.Property<uint>("PathId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Orientation")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<uint>("ScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("WaitTime")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("waittime in millisecs");

                    b.HasKey("Entry", "PathId", "Point")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("script_waypoint", (string)null);

                    b.HasComment("Script Creature waypoints");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SkillDiscoveryTemplate", b =>
                {
                    b.Property<uint>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellId")
                        .HasDefaultValueSql("'0'")
                        .HasComment("SpellId of the discoverable spell");

                    b.Property<float>("Chance")
                        .HasColumnType("float")
                        .HasColumnName("chance")
                        .HasComment("chance to discover");

                    b.Property<uint>("ReqSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("reqSpell")
                        .HasDefaultValueSql("'0'")
                        .HasComment("spell requirement");

                    b.HasKey("SpellId")
                        .HasName("PRIMARY");

                    b.ToTable("skill_discovery_template", (string)null);

                    b.HasComment("Skill Discovery System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SkillExtraItemTemplate", b =>
                {
                    b.Property<uint>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spellId")
                        .HasDefaultValueSql("'0'")
                        .HasComment("SpellId of the item creation spell");

                    b.Property<float>("AdditionalCreateChance")
                        .HasColumnType("float")
                        .HasColumnName("additionalCreateChance")
                        .HasComment("chance to create add");

                    b.Property<byte>("AdditionalMaxNum")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("additionalMaxNum")
                        .HasComment("max num of adds");

                    b.Property<uint>("RequiredSpecialization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("requiredSpecialization")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Specialization spell id");

                    b.HasKey("SpellId")
                        .HasName("PRIMARY");

                    b.ToTable("skill_extra_item_template", (string)null);

                    b.HasComment("Skill Specialization System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SkillFishingBaseLevel", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Area identifier");

                    b.Property<short>("Skill")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("skill")
                        .HasComment("Base skill level requirement");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("skill_fishing_base_level", (string)null);

                    b.HasComment("Fishing system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SkinningLootTemplate", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("item")
                        .HasDefaultValueSql("'0'");

                    b.Property<float>("ChanceOrQuestChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Groupid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("groupid");

                    b.Property<byte>("Maxcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("maxcount")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MincountOrRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("mincountOrRef")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "Item")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("skinning_loot_template", (string)null);

                    b.HasComment("Loot System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpamRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("record");

                    b.HasKey("Id");

                    b.ToTable("spam_records", (string)null);

                    b.HasComment("REGEX Spam records");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpawnGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Spawn Group ID");

                    b.Property<uint>("Flags")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Flags for various behaviour");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int(11)")
                        .HasComment("Maximum total count of all spawns in a group");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Description of usage")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)")
                        .HasComment("Creature or GO spawn group");

                    b.Property<int>("WorldState")
                        .HasColumnType("int(11)")
                        .HasComment("Worldstate which enables spawning of given group");

                    b.HasKey("Id");

                    b.ToTable("spawn_group", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpawnGroupEntry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Spawn Group ID");

                    b.Property<int>("Entry")
                        .HasColumnType("int(11)")
                        .HasComment("Entry of creature or GO");

                    b.Property<int>("Chance")
                        .HasColumnType("int(11)")
                        .HasComment("Chance for entry to be selected");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int(11)")
                        .HasComment("Maximum total count of entry in a group");

                    b.Property<int>("MinCount")
                        .HasColumnType("int(11)")
                        .HasComment("Minimum count of entry in a group before random");

                    b.HasKey("Id", "Entry")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spawn_group_entry", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpawnGroupFormation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Spawn group id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("FormationOptions")
                        .HasColumnType("int(11)")
                        .HasComment("Keep formation compact (bit 1)");

                    b.Property<float>("FormationSpread")
                        .HasColumnType("float(11,0)")
                        .HasComment("Distance between formation members");

                    b.Property<sbyte>("FormationType")
                        .HasColumnType("tinyint(11)")
                        .HasComment("Formation shape 0..6");

                    b.Property<sbyte>("MovementType")
                        .HasColumnType("tinyint(11)")
                        .HasComment("Same as creature table");

                    b.Property<int>("PathId")
                        .HasColumnType("int(11)")
                        .HasComment("PathId from waypoint_path path");

                    b.HasKey("Id");

                    b.ToTable("spawn_group_formation", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpawnGroupLinkedGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Spawn Group ID");

                    b.Property<int>("LinkedId")
                        .HasColumnType("int(11)")
                        .HasComment("Linked Spawn Group ID");

                    b.HasKey("Id", "LinkedId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spawn_group_linked_group", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpawnGroupSpawn", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Spawn Group ID");

                    b.Property<int>("Guid")
                        .HasColumnType("int(11)")
                        .HasComment("Guid of creature or GO");

                    b.Property<uint>("Chance")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Chance for a spawn to occur");

                    b.Property<sbyte>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("-1")
                        .HasComment("0 is the leader, -1 not part of the formation");

                    b.HasKey("Id", "Guid")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spawn_group_spawn", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellAffect", b =>
                {
                    b.Property<ushort>("Entry")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("entry");

                    b.Property<byte>("EffectId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("effectId");

                    b.Property<ulong>("SpellFamilyMask")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Entry", "EffectId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spell_affect", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellArea", b =>
                {
                    b.Property<uint>("Spell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Area")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("area")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("QuestStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest_start")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("QuestStartActive")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("quest_start_active");

                    b.Property<int>("AuraSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8)")
                        .HasColumnName("aura_spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Racemask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("racemask")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("gender")
                        .HasDefaultValueSql("'2'");

                    b.Property<byte>("Autocast")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("autocast");

                    b.Property<uint>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("condition_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("QuestEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("quest_end")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Spell", "Area", "QuestStart", "QuestStartActive", "AuraSpell", "Racemask", "Gender")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 0, 0, 0 });

                    b.ToTable("spell_area", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellBonusDatum", b =>
                {
                    b.Property<ushort>("Entry")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("entry");

                    b.Property<float>("ApBonus")
                        .HasColumnType("float")
                        .HasColumnName("ap_bonus");

                    b.Property<float>("ApDotBonus")
                        .HasColumnType("float")
                        .HasColumnName("ap_dot_bonus");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<float>("DirectBonus")
                        .HasColumnType("float")
                        .HasColumnName("direct_bonus");

                    b.Property<float>("DotBonus")
                        .HasColumnType("float")
                        .HasColumnName("dot_bonus");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("spell_bonus_data", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellChain", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("spell_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("FirstSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("first_spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("PrevSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("prev_spell")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Rank")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("rank");

                    b.Property<int>("ReqSpell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(9)")
                        .HasColumnName("req_spell")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("SpellId")
                        .HasName("PRIMARY");

                    b.ToTable("spell_chain", (string)null);

                    b.HasComment("Spell Additinal Data");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellElixir", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("entry")
                        .HasComment("SpellId of potion");

                    b.Property<byte>("Mask")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("mask")
                        .HasComment("Mask 0x1 battle 0x2 guardian 0x3 flask 0x7 unstable flasks 0xB shattrath flasks");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("spell_elixir", (string)null);

                    b.HasComment("Spell System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellLearnSpell", b =>
                {
                    b.Property<ushort>("Entry")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("entry");

                    b.Property<ushort>("SpellId")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("SpellID");

                    b.Property<byte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Entry", "SpellId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spell_learn_spell", (string)null);

                    b.HasComment("Item System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellPetAura", b =>
                {
                    b.Property<uint>("Spell")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("spell")
                        .HasComment("dummy spell id");

                    b.Property<uint>("Pet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("pet")
                        .HasDefaultValueSql("'0'")
                        .HasComment("pet id; 0 = all");

                    b.Property<uint>("Aura")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("aura")
                        .HasComment("pet aura id");

                    b.HasKey("Spell", "Pet")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spell_pet_auras", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellProcEvent", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Cooldown")
                        .HasColumnType("int(10) unsigned");

                    b.Property<float>("CustomChance")
                        .HasColumnType("float");

                    b.Property<float>("PpmRate")
                        .HasColumnType("float")
                        .HasColumnName("ppmRate");

                    b.Property<uint>("ProcEx")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("procEx");

                    b.Property<uint>("ProcFlags")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("procFlags");

                    b.Property<byte>("SchoolMask")
                        .HasColumnType("tinyint(4) unsigned");

                    b.Property<ulong>("SpellFamilyMask0")
                        .HasColumnType("bigint(40) unsigned");

                    b.Property<ulong>("SpellFamilyMask1")
                        .HasColumnType("bigint(40) unsigned");

                    b.Property<ulong>("SpellFamilyMask2")
                        .HasColumnType("bigint(40) unsigned");

                    b.Property<ushort>("SpellFamilyName")
                        .HasColumnType("smallint(5) unsigned");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("spell_proc_event", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellProcItemEnchant", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry");

                    b.Property<float>("PpmRate")
                        .HasColumnType("float")
                        .HasColumnName("ppmRate");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("spell_proc_item_enchant", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellScriptTarget", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry");

                    b.Property<uint>("InverseEffectMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("inverseEffectMask")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("TargetEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("targetEntry")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.HasIndex(new[] { "Entry", "Type", "TargetEntry" }, "entry_type_target")
                        .IsUnique();

                    b.ToTable("spell_script_target", (string)null);

                    b.HasComment("Spell System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellTargetPosition", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id")
                        .HasDefaultValueSql("'0'")
                        .HasComment("Identifier");

                    b.Property<ushort>("TargetMap")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("target_map");

                    b.Property<float>("TargetOrientation")
                        .HasColumnType("float")
                        .HasColumnName("target_orientation");

                    b.Property<float>("TargetPositionX")
                        .HasColumnType("float")
                        .HasColumnName("target_position_x");

                    b.Property<float>("TargetPositionY")
                        .HasColumnType("float")
                        .HasColumnName("target_position_y");

                    b.Property<float>("TargetPositionZ")
                        .HasColumnType("float")
                        .HasColumnName("target_position_z");

                    b.HasKey("Id");

                    b.ToTable("spell_target_position", (string)null);

                    b.HasComment("Spell System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellTemplate", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<uint>("DurationIndex")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("duration_index");

                    b.Property<uint>("Effect0")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0");

                    b.Property<uint>("Effect0ApplyAuraName")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_apply_aura_name");

                    b.Property<uint>("Effect0ImplicitTargetA")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_implicit_target_a");

                    b.Property<uint>("Effect0MiscValue")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_misc_value");

                    b.Property<uint>("Effect0MiscValueB")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_misc_value_b");

                    b.Property<uint>("Effect0RadiusIdx")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_radius_idx");

                    b.Property<uint>("Effect0TriggerSpell")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("effect0_trigger_spell");

                    b.Property<uint>("ProcChance")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("proc_chance");

                    b.Property<uint>("ProcFlags")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("proc_flags");

                    b.HasKey("Id");

                    b.ToTable("spell_template", (string)null);

                    b.HasComment("MaNGOS server side spells");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.SpellThreat", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry");

                    b.Property<float>("ApBonus")
                        .HasColumnType("float")
                        .HasColumnName("ap_bonus")
                        .HasComment("additional threat bonus from attack power");

                    b.Property<float>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("multiplier")
                        .HasDefaultValueSql("'1'")
                        .HasComment("threat multiplier for damage/healing");

                    b.Property<short>("Threat")
                        .HasColumnType("smallint(6)");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("spell_threat", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.TaxiShortcut", b =>
                {
                    b.Property<uint>("Pathid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pathid")
                        .HasComment("Flight path entry id");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("Landing")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("landing")
                        .HasComment("Amount of waypoints to skip at the end of the flight");

                    b.Property<uint>("Takeoff")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("takeoff")
                        .HasComment("Amount of waypoints to skip in the beginning of the flight");

                    b.HasKey("Pathid")
                        .HasName("PRIMARY");

                    b.ToTable("taxi_shortcuts", (string)null);

                    b.HasComment("Taxi System");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.TrainerGreeting", b =>
                {
                    b.Property<uint>("Entry")
                        .HasColumnType("int(11) unsigned")
                        .HasComment("Entry of Trainer");

                    b.Property<string>("Text")
                        .HasColumnType("longtext")
                        .HasComment("Text of the greeting");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("trainer_greeting", (string)null);

                    b.HasComment("Trainer system");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.Transport", b =>
                {
                    b.Property<uint>("Entry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("entry")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<uint>("Period")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("period")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Entry")
                        .HasName("PRIMARY");

                    b.ToTable("transports", (string)null);

                    b.HasComment("Transports");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.WardenScan", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("id");

                    b.Property<int?>("Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(8)")
                        .HasColumnName("address")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("comment");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<ushort>("Flags")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("flags");

                    b.Property<int?>("Length")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(2)")
                        .HasColumnName("length")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("result");

                    b.Property<string>("Str")
                        .HasColumnType("text")
                        .HasColumnName("str");

                    b.Property<int?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(2)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique();

                    b.ToTable("warden_scans", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.WaypointPath", b =>
                {
                    b.Property<uint>("PathId")
                        .HasColumnType("int(10) unsigned")
                        .HasComment("Unique path id");

                    b.Property<uint>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<float>("Orientation")
                        .HasColumnType("float");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<uint>("ScriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("WaitTime")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("PathId", "Point")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("waypoint_path", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.WorldSafeLoc", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Map")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<float>("O")
                        .HasColumnType("float")
                        .HasColumnName("o");

                    b.Property<float>("X")
                        .HasColumnType("float")
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .HasColumnType("float")
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .HasColumnType("float")
                        .HasColumnName("z");

                    b.HasKey("Id");

                    b.ToTable("world_safe_locs", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "latin1");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "latin1_swedish_ci");
                });

            modelBuilder.Entity("azuremyst.models.mangosd.WorldstateName", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int(11)")
                        .HasComment("Worldstate variable Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("Name and use of variable");

                    b.HasKey("Id");

                    b.ToTable("worldstate_name", (string)null);
                });

            modelBuilder.Entity("azuremyst.models.mangosd.WorldTemplate", b =>
                {
                    b.Property<ushort>("Map")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("map");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''");

                    b.HasKey("Map")
                        .HasName("PRIMARY");

                    b.ToTable("world_template", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });
#pragma warning restore 612, 618
        }
    }
}
