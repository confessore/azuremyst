<div class="container my-1 py-1">
    <div class="d-flex justify-content-center">
        <div class="input-group">
            <input type="@InputType" class="@InputClass" placeholder="password" @onchange="async args => { await OnPasswordChangedAsync(args); }" />
            <span class="input-group-text">
                <button type="button" class="btn btn-primary oi oi-eye" @onclick="OnPasswordVisibleClicked" />
            </span>
            <div class="@FeedbackClass">
                @FeedbackContent
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public string? Password { get; set; }
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }
    [Parameter]
    public bool Validate { get; set; }

    Model model = new();

    class Model
    {
        public string? Password { get; set; }
        public bool PasswordVisible { get; set; }
        public bool InputValid { get; set; }
    }

    string? InputType =>
        model.PasswordVisible ? "text" : "password";

    string? InputClass
    {
        get
        {
            if (Validate)
                return model.InputValid ? "form-control is-valid" : "form-control is-invalid";
            return "form-control";
        }
    }

    string? FeedbackClass =>
        model.InputValid ? "valid-feedback" : "invalid-feedback";
    string? FeedbackContent =>
        model.InputValid ? "looks good!" : "make it more complex";

    async Task OnPasswordChangedAsync(ChangeEventArgs args)
    {
        var value = args.Value != null ? (string)args.Value : string.Empty;
        model.Password = Password = value;
        UpdateValidity();
        await PasswordChanged.InvokeAsync(Password);
    }

    void OnPasswordVisibleClicked() =>
        model.PasswordVisible = !model.PasswordVisible;

    void UpdateValidity()
    {
        if (!string.IsNullOrEmpty(model.Password))
            model.InputValid = Regex.Match(model.Password, @"^[a-zA-Z]*$").Success;
        else
            model.InputValid = false;
    }
}
