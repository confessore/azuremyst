@using Microsoft.AspNetCore.Components;
@using System.Text.RegularExpressions;

<div class="container my-1 py-1">
    <div class="d-flex justify-content-center">
        <div class="input-group">
            <input type="username" class="@InputClass" placeholder="username" @oninput="async args => { await OnUsernameChangedAsync(args); }" />
            <div class="@FeedbackClass">
                @FeedbackContent
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public string? Username { get; set; } 
    [Parameter]
    public EventCallback<string?> UsernameChanged { get; set; }
    [Parameter]
    public bool Validate { get; set; }
    [Parameter]
    public bool InputValid { get; set; }
    [Parameter]
    public EventCallback<bool> InputValidChanged { get; set; }

    Model model = new();

    class Model
    {
        public string? Username { get; set; }
        public bool InputValid { get; set; }
    }

    string? InputClass
    {
        get
        {
            if (Validate)
                return model.InputValid ? "form-control is-valid" : "form-control is-invalid";
            return "form-control";
        }
    }

    string? FeedbackClass =>
        model.InputValid ? "valid-feedback" : "invalid-feedback";
    string? FeedbackContent =>
        model.InputValid ? "looks good!" : "at least 6 letters and numbers only";

    public async Task OnUsernameChangedAsync(ChangeEventArgs args)
    {
        var value = args.Value != null ? (string)args.Value : string.Empty;
        model.Username = Username = value;
        await UsernameChanged.InvokeAsync(Username);
        await UpdateValidityAsync();
    }

    async Task UpdateValidityAsync()
    {
        if (!string.IsNullOrEmpty(model.Username))
        {
            try
            {
                var valid = Regex.Match(model.Username, @"^(?=\S{5,})[a-zA-Z0-9]*$").Success;
                model.InputValid = InputValid = valid;
            }
            catch
            {
                model.InputValid = InputValid = false;
            }
        }
        else
            model.InputValid = InputValid = false;
        await InputValidChanged.InvokeAsync(InputValid);
    }
}

